
RTOS_PowerWindowControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a00  08004a00  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a08  08004a08  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004014  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004074  20004074  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b5b4  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028a0  00000000  00000000  0002b687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b30  00000000  00000000  0002df28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000846  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c2e  00000000  00000000  0002f29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000dce2  00000000  00000000  00052ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7b4f  00000000  00000000  00060bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ab4  00000000  00000000  00138700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0013b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004970 	.word	0x08004970

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08004970 	.word	0x08004970

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <BUTTON_Init>:
 *              then Inside MX_GPIO_Init() -> Call __HAL_RCC_GPIOA_CLK_ENABLE(); first
 *
 *   Returns: None
 */
void BUTTON_Init(BUTTON_TypeDef *BUTTONx)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    if (BUTTONx == NULL)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d019      	beq.n	800052e <BUTTON_Init+0x42>
        return;

    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

    /* Configure GPIO pins */
    GPIO_InitStruct.Pin = BUTTONx->GPIO_pin;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	889b      	ldrh	r3, [r3, #4]
 800050e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000514:	2301      	movs	r3, #1
 8000516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000518:	2302      	movs	r3, #2
 800051a:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(BUTTONx->GPIOx, &GPIO_InitStruct);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f107 020c 	add.w	r2, r7, #12
 8000524:	4611      	mov	r1, r2
 8000526:	4618      	mov	r0, r3
 8000528:	f001 f83e 	bl	80015a8 <HAL_GPIO_Init>
 800052c:	e000      	b.n	8000530 <BUTTON_Init+0x44>
        return;
 800052e:	bf00      	nop
}
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <BUTTON_IsPressed>:
 *
 *   Returns:
 *     uint8_t: The reversed state of the button (1 if pressed, 0 if not pressed).
 */
uint8_t BUTTON_IsPressed(BUTTON_TypeDef *BUTTONx)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
    if (BUTTONx == NULL)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d101      	bne.n	8000548 <BUTTON_IsPressed+0x12>
        return 0xFF;                    // Return an error value if the button pointer is NULL
 8000544:	23ff      	movs	r3, #255	; 0xff
 8000546:	e00d      	b.n	8000564 <BUTTON_IsPressed+0x2e>

    // Read the state of the button pin and return the inverted value (button is in pull-up mode)
    return (!HAL_GPIO_ReadPin(BUTTONx->GPIOx, BUTTONx->GPIO_pin));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	889b      	ldrh	r3, [r3, #4]
 8000550:	4619      	mov	r1, r3
 8000552:	4610      	mov	r0, r2
 8000554:	f001 f9d4 	bl	8001900 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf0c      	ite	eq
 800055e:	2301      	moveq	r3, #1
 8000560:	2300      	movne	r3, #0
 8000562:	b2db      	uxtb	r3, r3
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <DcMotor_Init>:
 Description
 1) The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 2) Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

	__MOTOR_PORT_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <DcMotor_Init+0x68>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <DcMotor_Init+0x68>)
 800058a:	f043 0302 	orr.w	r3, r3, #2
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <DcMotor_Init+0x68>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	f003 0302 	and.w	r3, r3, #2
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

	/* Configure GPIO pins */
	GPIO_InitStruct.Pin = MOTOR_IN1_PIN_ID | MOTOR_IN2_PIN_ID | MOTOR_EN1_PIN_ID;
 800059c:	2307      	movs	r3, #7
 800059e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005a4:	2302      	movs	r3, #2
 80005a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(MOTOR_GPIO_PORT, &GPIO_InitStruct);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4619      	mov	r1, r3
 80005b0:	4809      	ldr	r0, [pc, #36]	; (80005d8 <DcMotor_Init+0x6c>)
 80005b2:	f000 fff9 	bl	80015a8 <HAL_GPIO_Init>

	/* Configure GPIO pin Output Level */
	/* Stop the DC-Motor at the beginning (IN1 = 0, IN2 = 0) */
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN1_PIN_ID, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2101      	movs	r1, #1
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <DcMotor_Init+0x6c>)
 80005bc:	f001 f9b8 	bl	8001930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN2_PIN_ID, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2102      	movs	r1, #2
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <DcMotor_Init+0x6c>)
 80005c6:	f001 f9b3 	bl	8001930 <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020400 	.word	0x40020400

080005dc <DcMotor_Rotate>:
 1) State: The required DC Motor state, it should be CW or A-CW or stop.
 DcMotor_State data type should be declared as enum or uint8.

 Return: None
 */
void DcMotor_Rotate(DcMotor_State state) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_EN1_PIN_ID, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2104      	movs	r1, #4
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <DcMotor_Rotate+0x74>)
 80005ec:	f001 f9a0 	bl	8001930 <HAL_GPIO_WritePin>

	/* Setting the DC Motor rotation direction (CW/ or A-CW or stop) based on the state value. */
	switch (state) {
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d011      	beq.n	800061a <DcMotor_Rotate+0x3e>
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	dc25      	bgt.n	8000646 <DcMotor_Rotate+0x6a>
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <DcMotor_Rotate+0x28>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d016      	beq.n	8000630 <DcMotor_Rotate+0x54>
		/* DC-Motor Mode --> Anti_ClockWise Rotation (IN1 = 1, IN2 = 0) */
		HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN1_PIN_ID, GPIO_PIN_SET);
		HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN2_PIN_ID, GPIO_PIN_RESET);
		break;
	default:
		break;
 8000602:	e020      	b.n	8000646 <DcMotor_Rotate+0x6a>
		HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN1_PIN_ID, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <DcMotor_Rotate+0x74>)
 800060a:	f001 f991 	bl	8001930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN2_PIN_ID, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2102      	movs	r1, #2
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <DcMotor_Rotate+0x74>)
 8000614:	f001 f98c 	bl	8001930 <HAL_GPIO_WritePin>
		break;
 8000618:	e016      	b.n	8000648 <DcMotor_Rotate+0x6c>
		HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN1_PIN_ID, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <DcMotor_Rotate+0x74>)
 8000620:	f001 f986 	bl	8001930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN2_PIN_ID, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <DcMotor_Rotate+0x74>)
 800062a:	f001 f981 	bl	8001930 <HAL_GPIO_WritePin>
		break;
 800062e:	e00b      	b.n	8000648 <DcMotor_Rotate+0x6c>
		HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN1_PIN_ID, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <DcMotor_Rotate+0x74>)
 8000636:	f001 f97b 	bl	8001930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_IN2_PIN_ID, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2102      	movs	r1, #2
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <DcMotor_Rotate+0x74>)
 8000640:	f001 f976 	bl	8001930 <HAL_GPIO_WritePin>
		break;
 8000644:	e000      	b.n	8000648 <DcMotor_Rotate+0x6c>
		break;
 8000646:	bf00      	nop
	}
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020400 	.word	0x40020400

08000654 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <vApplicationGetIdleTaskMemory+0x2c>)
 8000664:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <vApplicationGetIdleTaskMemory+0x30>)
 800066a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000007c 	.word	0x2000007c
 8000684:	200000d0 	.word	0x200000d0

08000688 <LED_Init>:
 * @brief  Initializes the LED pin configuration
 * @param  LEDx: Pointer to a structure that holds the GPIO port and pin number of the LED
 * @retval None
 */
void LED_Init(LED_TypeDef *LEDx)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    if (LEDx == NULL)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d021      	beq.n	80006da <LED_Init+0x52>
        return;  // Exit if LEDx is a null pointer

    GPIO_InitTypeDef GPIO_InitStruct = {0};  // Initialize GPIO structure
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

    /* Configure GPIO pins */
    GPIO_InitStruct.Pin = LEDx->GPIO_pin;  // Set the pin number
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	889b      	ldrh	r3, [r3, #4]
 80006aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Set the pin to output push-pull mode
 80006ac:	2301      	movs	r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;  // Set pull-down resistor
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Set GPIO speed to high frequency
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LEDx->GPIOx, &GPIO_InitStruct);  // Initialize GPIO pin
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f107 020c 	add.w	r2, r7, #12
 80006c0:	4611      	mov	r1, r2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 ff70 	bl	80015a8 <HAL_GPIO_Init>

    // Turn off the LED initially
    HAL_GPIO_WritePin(LEDx->GPIOx, LEDx->GPIO_pin, GPIO_PIN_RESET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	889b      	ldrh	r3, [r3, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f001 f92c 	bl	8001930 <HAL_GPIO_WritePin>
 80006d8:	e000      	b.n	80006dc <LED_Init+0x54>
        return;  // Exit if LEDx is a null pointer
 80006da:	bf00      	nop
}
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <LED_Output>:
 * @param  LEDx: Pointer to a structure that holds the GPIO port and pin number of the LED
 * @param  LedState: State to set the LED (LED_ON or LED_OFF)
 * @retval None
 */
void LED_Output(LED_TypeDef *LEDx, GPIO_PinState LedState)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	460b      	mov	r3, r1
 80006ec:	70fb      	strb	r3, [r7, #3]
    if (LEDx == NULL)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d008      	beq.n	8000706 <LED_Output+0x24>
        return;  // Exit if LEDx is a null pointer

    HAL_GPIO_WritePin(LEDx->GPIOx, LEDx->GPIO_pin, LedState);  // Set LED state
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	78fa      	ldrb	r2, [r7, #3]
 80006fe:	4619      	mov	r1, r3
 8000700:	f001 f916 	bl	8001930 <HAL_GPIO_WritePin>
 8000704:	e000      	b.n	8000708 <LED_Output+0x26>
        return;  // Exit if LEDx is a null pointer
 8000706:	bf00      	nop
}
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <LimitSwitch_Init>:
 * Return:
 * - None
 */

void LimitSwitch_Init(LimitSwitch_TypeDef *LimitSwitch)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b088      	sub	sp, #32
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
    if (LimitSwitch == NULL)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d019      	beq.n	8000750 <LimitSwitch_Init+0x42>
        return;

    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

    /* Configure GPIO pins */
    GPIO_InitStruct.Pin = LimitSwitch->GPIO_pin;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	889b      	ldrh	r3, [r3, #4]
 8000730:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	2302      	movs	r3, #2
 8000738:	61bb      	str	r3, [r7, #24]

#if (C_PIN_IS_CONNECTED_TO_GND)
    // Enable internal pull-up resistor for the pin
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073a:	2301      	movs	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
#else
    // Enable internal pull-down resistor for the pin
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
#endif // C_PIN_IS_CONNECTED_TO_GND

    HAL_GPIO_Init(LimitSwitch->GPIOx, &GPIO_InitStruct);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f107 020c 	add.w	r2, r7, #12
 8000746:	4611      	mov	r1, r2
 8000748:	4618      	mov	r0, r3
 800074a:	f000 ff2d 	bl	80015a8 <HAL_GPIO_Init>
 800074e:	e000      	b.n	8000752 <LimitSwitch_Init+0x44>
        return;
 8000750:	bf00      	nop
}
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <LimitSwitch_IsPressed>:
 * 
 * Return:
 * - uint8_t: The state of the limit switch (0 if pressed, 1 if not pressed).
 */
uint8_t LimitSwitch_IsPressed(LimitSwitch_TypeDef *limitSwitch)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    if (limitSwitch == NULL)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <LimitSwitch_IsPressed+0x12>
        return 0xFF; // Return an error value if the limit switch pointer is NULL
 8000766:	23ff      	movs	r3, #255	; 0xff
 8000768:	e008      	b.n	800077c <LimitSwitch_IsPressed+0x24>
    return (!HAL_GPIO_ReadPin(limitSwitch->GPIOx, limitSwitch->GPIO_pin));

#elif ((C_PIN_IS_CONNECTED_TO_GND && !NO_PIN_IS_CONNECTED) || (!C_PIN_IS_CONNECTED_TO_GND && NO_PIN_IS_CONNECTED))

    // Read the state of the limit switch pin and return the original value
    return (HAL_GPIO_ReadPin(limitSwitch->GPIOx, limitSwitch->GPIO_pin));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	889b      	ldrh	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	4610      	mov	r0, r2
 8000776:	f001 f8c3 	bl	8001900 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0

#endif

}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <main>:
/**
 *
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000784:	b5b0      	push	{r4, r5, r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af02      	add	r7, sp, #8

	HAL_Init();
 800078a:	f000 fc99 	bl	80010c0 <HAL_Init>

	SystemClock_Config();
 800078e:	f000 fb67 	bl	8000e60 <SystemClock_Config>

	MX_GPIO_Init();
 8000792:	f000 fbc5 	bl	8000f20 <MX_GPIO_Init>

	MX_NVIC_Init();
 8000796:	f000 fb4f 	bl	8000e38 <MX_NVIC_Init>

	BUTTON_Init(&LockBtn);
 800079a:	4860      	ldr	r0, [pc, #384]	; (800091c <main+0x198>)
 800079c:	f7ff fea6 	bl	80004ec <BUTTON_Init>

	BUTTON_Init(&PassengerUpButton);
 80007a0:	485f      	ldr	r0, [pc, #380]	; (8000920 <main+0x19c>)
 80007a2:	f7ff fea3 	bl	80004ec <BUTTON_Init>
	BUTTON_Init(&PassengerDownButton);
 80007a6:	485f      	ldr	r0, [pc, #380]	; (8000924 <main+0x1a0>)
 80007a8:	f7ff fea0 	bl	80004ec <BUTTON_Init>

	BUTTON_Init(&DriverUpButton);
 80007ac:	485e      	ldr	r0, [pc, #376]	; (8000928 <main+0x1a4>)
 80007ae:	f7ff fe9d 	bl	80004ec <BUTTON_Init>
	BUTTON_Init(&DriverDownButton);
 80007b2:	485e      	ldr	r0, [pc, #376]	; (800092c <main+0x1a8>)
 80007b4:	f7ff fe9a 	bl	80004ec <BUTTON_Init>

	BUTTON_Init(&JamButton);
 80007b8:	485d      	ldr	r0, [pc, #372]	; (8000930 <main+0x1ac>)
 80007ba:	f7ff fe97 	bl	80004ec <BUTTON_Init>

	LimitSwitch_Init(&LimitUpSwitch);
 80007be:	485d      	ldr	r0, [pc, #372]	; (8000934 <main+0x1b0>)
 80007c0:	f7ff ffa5 	bl	800070e <LimitSwitch_Init>
	LimitSwitch_Init(&LimitDownSwitch);
 80007c4:	485c      	ldr	r0, [pc, #368]	; (8000938 <main+0x1b4>)
 80007c6:	f7ff ffa2 	bl	800070e <LimitSwitch_Init>

	LED_Init(&USER_LD3_GREEN_LED);
 80007ca:	485c      	ldr	r0, [pc, #368]	; (800093c <main+0x1b8>)
 80007cc:	f7ff ff5c 	bl	8000688 <LED_Init>
	LED_Init(&USER_LD4_RED_LED);
 80007d0:	485b      	ldr	r0, [pc, #364]	; (8000940 <main+0x1bc>)
 80007d2:	f7ff ff59 	bl	8000688 <LED_Init>

	DcMotor_Init();
 80007d6:	f7ff fec9 	bl	800056c <DcMotor_Init>

	EXTI_Initialization();
 80007da:	f000 faad 	bl	8000d38 <EXTI_Initialization>

	HAL_EXTI_SetConfigLine(&hextiA, &exti_configA);
 80007de:	4959      	ldr	r1, [pc, #356]	; (8000944 <main+0x1c0>)
 80007e0:	4859      	ldr	r0, [pc, #356]	; (8000948 <main+0x1c4>)
 80007e2:	f000 fe15 	bl	8001410 <HAL_EXTI_SetConfigLine>

	HAL_EXTI_SetConfigLine(&hextiB, &exti_configB);
 80007e6:	4959      	ldr	r1, [pc, #356]	; (800094c <main+0x1c8>)
 80007e8:	4859      	ldr	r0, [pc, #356]	; (8000950 <main+0x1cc>)
 80007ea:	f000 fe11 	bl	8001410 <HAL_EXTI_SetConfigLine>

	xMotorMutex = xSemaphoreCreateMutex();
 80007ee:	2001      	movs	r0, #1
 80007f0:	f001 ff03 	bl	80025fa <xQueueCreateMutex>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a57      	ldr	r2, [pc, #348]	; (8000954 <main+0x1d0>)
 80007f8:	6013      	str	r3, [r2, #0]

	xQueue = xQueueCreate(2, sizeof(long));
 80007fa:	2200      	movs	r2, #0
 80007fc:	2104      	movs	r1, #4
 80007fe:	2002      	movs	r0, #2
 8000800:	f001 fe88 	bl	8002514 <xQueueGenericCreate>
 8000804:	4603      	mov	r3, r0
 8000806:	4a54      	ldr	r2, [pc, #336]	; (8000958 <main+0x1d4>)
 8000808:	6013      	str	r3, [r2, #0]

	vSemaphoreCreateBinary(xBinarySemaphore);
 800080a:	2203      	movs	r2, #3
 800080c:	2100      	movs	r1, #0
 800080e:	2001      	movs	r0, #1
 8000810:	f001 fe80 	bl	8002514 <xQueueGenericCreate>
 8000814:	4603      	mov	r3, r0
 8000816:	4a51      	ldr	r2, [pc, #324]	; (800095c <main+0x1d8>)
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	4b50      	ldr	r3, [pc, #320]	; (800095c <main+0x1d8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <main+0xac>
 8000822:	4b4e      	ldr	r3, [pc, #312]	; (800095c <main+0x1d8>)
 8000824:	6818      	ldr	r0, [r3, #0]
 8000826:	2300      	movs	r3, #0
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	f001 fefe 	bl	800262c <xQueueGenericSend>
	vSemaphoreCreateBinary(xLockSemaphore);
 8000830:	2203      	movs	r2, #3
 8000832:	2100      	movs	r1, #0
 8000834:	2001      	movs	r0, #1
 8000836:	f001 fe6d 	bl	8002514 <xQueueGenericCreate>
 800083a:	4603      	mov	r3, r0
 800083c:	4a48      	ldr	r2, [pc, #288]	; (8000960 <main+0x1dc>)
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b47      	ldr	r3, [pc, #284]	; (8000960 <main+0x1dc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d006      	beq.n	8000856 <main+0xd2>
 8000848:	4b45      	ldr	r3, [pc, #276]	; (8000960 <main+0x1dc>)
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	2300      	movs	r3, #0
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	f001 feeb 	bl	800262c <xQueueGenericSend>
	vSemaphoreCreateBinary(xJamSemaphore);
 8000856:	2203      	movs	r2, #3
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f001 fe5a 	bl	8002514 <xQueueGenericCreate>
 8000860:	4603      	mov	r3, r0
 8000862:	4a40      	ldr	r2, [pc, #256]	; (8000964 <main+0x1e0>)
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	4b3f      	ldr	r3, [pc, #252]	; (8000964 <main+0x1e0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d006      	beq.n	800087c <main+0xf8>
 800086e:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <main+0x1e0>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	f001 fed8 	bl	800262c <xQueueGenericSend>

	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800087c:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <main+0x1e4>)
 800087e:	1d3c      	adds	r4, r7, #4
 8000880:	461d      	mov	r5, r3
 8000882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000886:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800088a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fcc1 	bl	800221a <osThreadCreate>
 8000898:	4603      	mov	r3, r0
 800089a:	4a34      	ldr	r2, [pc, #208]	; (800096c <main+0x1e8>)
 800089c:	6013      	str	r3, [r2, #0]

	if (xBinarySemaphore != NULL) // Check if binary semaphore was created successfully
 800089e:	4b2f      	ldr	r3, [pc, #188]	; (800095c <main+0x1d8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d038      	beq.n	8000918 <main+0x194>
	{
		// Create tasks
		xTaskCreate(JamTask, "JamTask", 270, NULL, 5, NULL);   //Create Jam Task
 80008a6:	2300      	movs	r3, #0
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	2305      	movs	r3, #5
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2300      	movs	r3, #0
 80008b0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80008b4:	492e      	ldr	r1, [pc, #184]	; (8000970 <main+0x1ec>)
 80008b6:	482f      	ldr	r0, [pc, #188]	; (8000974 <main+0x1f0>)
 80008b8:	f002 fbb5 	bl	8003026 <xTaskCreate>
		xTaskCreate(LockPassengerTask, "LockTask", 270, NULL, 4, NULL); // Create lock task
 80008bc:	2300      	movs	r3, #0
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	2304      	movs	r3, #4
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2300      	movs	r3, #0
 80008c6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80008ca:	492b      	ldr	r1, [pc, #172]	; (8000978 <main+0x1f4>)
 80008cc:	482b      	ldr	r0, [pc, #172]	; (800097c <main+0x1f8>)
 80008ce:	f002 fbaa 	bl	8003026 <xTaskCreate>
		xTaskCreate(receiveQueue, "recieveQueue", 270, NULL, 3, NULL); //Create Receive task
 80008d2:	2300      	movs	r3, #0
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	2303      	movs	r3, #3
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80008e0:	4927      	ldr	r1, [pc, #156]	; (8000980 <main+0x1fc>)
 80008e2:	4828      	ldr	r0, [pc, #160]	; (8000984 <main+0x200>)
 80008e4:	f002 fb9f 	bl	8003026 <xTaskCreate>
		xTaskCreate(PassengerTask, "passenger", 270, NULL, 1, NULL); // Create passenger task
 80008e8:	2300      	movs	r3, #0
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	2301      	movs	r3, #1
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2300      	movs	r3, #0
 80008f2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80008f6:	4924      	ldr	r1, [pc, #144]	; (8000988 <main+0x204>)
 80008f8:	4824      	ldr	r0, [pc, #144]	; (800098c <main+0x208>)
 80008fa:	f002 fb94 	bl	8003026 <xTaskCreate>
		xTaskCreate(DriverTask, "driver", 270, NULL, 1, &DriverHandle); // Create driver task
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <main+0x20c>)
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	2301      	movs	r3, #1
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800090c:	4921      	ldr	r1, [pc, #132]	; (8000994 <main+0x210>)
 800090e:	4822      	ldr	r0, [pc, #136]	; (8000998 <main+0x214>)
 8000910:	f002 fb89 	bl	8003026 <xTaskCreate>

		osKernelStart();
 8000914:	f001 fc7a 	bl	800220c <osKernelStart>
	}

	for(;;);
 8000918:	e7fe      	b.n	8000918 <main+0x194>
 800091a:	bf00      	nop
 800091c:	20000020 	.word	0x20000020
 8000920:	20000010 	.word	0x20000010
 8000924:	20000018 	.word	0x20000018
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000028 	.word	0x20000028
 8000934:	20000030 	.word	0x20000030
 8000938:	20000038 	.word	0x20000038
 800093c:	20000040 	.word	0x20000040
 8000940:	20000048 	.word	0x20000048
 8000944:	200002f4 	.word	0x200002f4
 8000948:	200002ec 	.word	0x200002ec
 800094c:	2000030c 	.word	0x2000030c
 8000950:	20000304 	.word	0x20000304
 8000954:	200002e0 	.word	0x200002e0
 8000958:	200002e8 	.word	0x200002e8
 800095c:	200002d8 	.word	0x200002d8
 8000960:	200002d4 	.word	0x200002d4
 8000964:	200002dc 	.word	0x200002dc
 8000968:	080049cc 	.word	0x080049cc
 800096c:	200002d0 	.word	0x200002d0
 8000970:	08004988 	.word	0x08004988
 8000974:	08000a49 	.word	0x08000a49
 8000978:	08004990 	.word	0x08004990
 800097c:	080009dd 	.word	0x080009dd
 8000980:	0800499c 	.word	0x0800499c
 8000984:	08000a85 	.word	0x08000a85
 8000988:	080049ac 	.word	0x080049ac
 800098c:	08000bf5 	.word	0x08000bf5
 8000990:	200002e4 	.word	0x200002e4
 8000994:	080049b8 	.word	0x080049b8
 8000998:	08000ab1 	.word	0x08000ab1

0800099c <PWC_motorControl>:

}

// Helper Function For Power Window Control Module (PWC)
void PWC_motorControl(MotorControlCommand_e command) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	switch (command) {
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d00e      	beq.n	80009ca <PWC_motorControl+0x2e>
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	dc10      	bgt.n	80009d2 <PWC_motorControl+0x36>
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d002      	beq.n	80009ba <PWC_motorControl+0x1e>
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d004      	beq.n	80009c2 <PWC_motorControl+0x26>
	case DOWN:
		DcMotor_Rotate(Anti_ClockWise);
		break;
	default:
		// DO Nothing
		break;
 80009b8:	e00b      	b.n	80009d2 <PWC_motorControl+0x36>
		DcMotor_Rotate(STOP);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fe0e 	bl	80005dc <DcMotor_Rotate>
		break;
 80009c0:	e008      	b.n	80009d4 <PWC_motorControl+0x38>
		DcMotor_Rotate(ClockWise);
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff fe0a 	bl	80005dc <DcMotor_Rotate>
		break;
 80009c8:	e004      	b.n	80009d4 <PWC_motorControl+0x38>
		DcMotor_Rotate(Anti_ClockWise);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff fe06 	bl	80005dc <DcMotor_Rotate>
		break;
 80009d0:	e000      	b.n	80009d4 <PWC_motorControl+0x38>
		break;
 80009d2:	bf00      	nop
	}
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <LockPassengerTask>:

void LockPassengerTask(void *pvParameters) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(xLockSemaphore, 0); // Attempt to take semaphore (non-blocking)
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <LockPassengerTask+0x5c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 f88a 	bl	8002b04 <xQueueSemaphoreTake>

	while (1) {
		// Take semaphore (blocking)
		xSemaphoreTake(xLockSemaphore, portMAX_DELAY);
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <LockPassengerTask+0x5c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 f883 	bl	8002b04 <xQueueSemaphoreTake>

		// Check lock button state
		if (BUTTON_IsPressed(&LockBtn)) {
 80009fe:	480f      	ldr	r0, [pc, #60]	; (8000a3c <LockPassengerTask+0x60>)
 8000a00:	f7ff fd99 	bl	8000536 <BUTTON_IsPressed>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00a      	beq.n	8000a20 <LockPassengerTask+0x44>
			LED_Output(&USER_LD4_RED_LED, LED_ON); // Turn RED LED ON for indication
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LockPassengerTask+0x64>)
 8000a0e:	f7ff fe68 	bl	80006e2 <LED_Output>
			vTaskPrioritySet(DriverHandle, 2); // Change Driver Task Priority to 2
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <LockPassengerTask+0x68>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2102      	movs	r1, #2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fc6f 	bl	80032fc <vTaskPrioritySet>
 8000a1e:	e7e7      	b.n	80009f0 <LockPassengerTask+0x14>
		} else {
			LED_Output(&USER_LD4_RED_LED, LED_OFF); // Turn RED LED OFF for indication
 8000a20:	2100      	movs	r1, #0
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <LockPassengerTask+0x64>)
 8000a24:	f7ff fe5d 	bl	80006e2 <LED_Output>
			vTaskPrioritySet(DriverHandle, 1); // Change Driver Task Priority to 1
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <LockPassengerTask+0x68>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 fc64 	bl	80032fc <vTaskPrioritySet>
		xSemaphoreTake(xLockSemaphore, portMAX_DELAY);
 8000a34:	e7dc      	b.n	80009f0 <LockPassengerTask+0x14>
 8000a36:	bf00      	nop
 8000a38:	200002d4 	.word	0x200002d4
 8000a3c:	20000020 	.word	0x20000020
 8000a40:	20000048 	.word	0x20000048
 8000a44:	200002e4 	.word	0x200002e4

08000a48 <JamTask>:
		}
	}
}

void JamTask(void *pvParameters) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(xJamSemaphore, 0);
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <JamTask+0x38>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 f854 	bl	8002b04 <xQueueSemaphoreTake>
	for (;;) {
		xSemaphoreTake(xJamSemaphore, portMAX_DELAY);
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <JamTask+0x38>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 f84d 	bl	8002b04 <xQueueSemaphoreTake>

		/* Turn The motor to simulate the window moving */
		PWC_motorControl(DOWN);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f7ff ff96 	bl	800099c <PWC_motorControl>

		/* Delay for 2.0 seconds ( to be clearly seen in the video */
		HAL_Delay(2000);
 8000a70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a74:	f000 fb96 	bl	80011a4 <HAL_Delay>

		/* Clear Pins to stop the motor */
		PWC_motorControl(OFF);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff ff8f 	bl	800099c <PWC_motorControl>
		xSemaphoreTake(xJamSemaphore, portMAX_DELAY);
 8000a7e:	e7ed      	b.n	8000a5c <JamTask+0x14>
 8000a80:	200002dc 	.word	0x200002dc

08000a84 <receiveQueue>:
	}
}

void receiveQueue(void *pvParameters) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	int Val;
	BaseType_t xStatus;
	while (1) {
		// Receive from queue (blocking)
		xStatus = xQueueReceive(xQueue, &Val, portMAX_DELAY);
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <receiveQueue+0x28>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f107 0108 	add.w	r1, r7, #8
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 ff53 	bl	8002944 <xQueueReceive>
 8000a9e:	60f8      	str	r0, [r7, #12]
		PWC_motorControl(Val);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff79 	bl	800099c <PWC_motorControl>
		xStatus = xQueueReceive(xQueue, &Val, portMAX_DELAY);
 8000aaa:	e7ef      	b.n	8000a8c <receiveQueue+0x8>
 8000aac:	200002e8 	.word	0x200002e8

08000ab0 <DriverTask>:
	}
}

void DriverTask(void *pvParamters) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	int Mode = OFF;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]

	for (;;) {

		xSemaphoreTake(xMotorMutex, portMAX_DELAY);
 8000abc:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <DriverTask+0x12c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 f81d 	bl	8002b04 <xQueueSemaphoreTake>

		//Handle the Up Button
		if (BUTTON_IsPressed(&DriverUpButton)) {
 8000aca:	4845      	ldr	r0, [pc, #276]	; (8000be0 <DriverTask+0x130>)
 8000acc:	f7ff fd33 	bl	8000536 <BUTTON_IsPressed>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d038      	beq.n	8000b48 <DriverTask+0x98>
			Mode = UP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
			xQueueSendToBack(xQueue, &Mode, 0);
 8000ada:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <DriverTask+0x134>)
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	f107 010c 	add.w	r1, r7, #12
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f001 fda1 	bl	800262c <xQueueGenericSend>
			vTaskDelay(400); // Debounce delay
 8000aea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000aee:	f002 fbd1 	bl	8003294 <vTaskDelay>

			if (BUTTON_IsPressed(&DriverUpButton)) {  			// Manual Mode
 8000af2:	483b      	ldr	r0, [pc, #236]	; (8000be0 <DriverTask+0x130>)
 8000af4:	f7ff fd1f 	bl	8000536 <BUTTON_IsPressed>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00d      	beq.n	8000b1a <DriverTask+0x6a>
				PWC_motorControl(UP);
 8000afe:	2002      	movs	r0, #2
 8000b00:	f7ff ff4c 	bl	800099c <PWC_motorControl>
				while (BUTTON_IsPressed(&DriverUpButton))
 8000b04:	bf00      	nop
 8000b06:	4836      	ldr	r0, [pc, #216]	; (8000be0 <DriverTask+0x130>)
 8000b08:	f7ff fd15 	bl	8000536 <BUTTON_IsPressed>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f9      	bne.n	8000b06 <DriverTask+0x56>
					;
				PWC_motorControl(OFF);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff ff42 	bl	800099c <PWC_motorControl>
 8000b18:	e00c      	b.n	8000b34 <DriverTask+0x84>

			} else { // Automatic Mode
				PWC_motorControl(UP);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff ff3e 	bl	800099c <PWC_motorControl>
				while (!LimitSwitch_IsPressed(&LimitUpSwitch))
 8000b20:	bf00      	nop
 8000b22:	4831      	ldr	r0, [pc, #196]	; (8000be8 <DriverTask+0x138>)
 8000b24:	f7ff fe18 	bl	8000758 <LimitSwitch_IsPressed>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f9      	beq.n	8000b22 <DriverTask+0x72>
					;
				PWC_motorControl(OFF);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff ff34 	bl	800099c <PWC_motorControl>
			}

			Mode = OFF;
 8000b34:	2301      	movs	r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
			xQueueSendToBack(xQueue, &Mode, 0);
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <DriverTask+0x134>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	f107 010c 	add.w	r1, r7, #12
 8000b40:	2300      	movs	r3, #0
 8000b42:	2200      	movs	r2, #0
 8000b44:	f001 fd72 	bl	800262c <xQueueGenericSend>
		}

		//Handle the Down Button
		if (BUTTON_IsPressed(&DriverDownButton)) {
 8000b48:	4828      	ldr	r0, [pc, #160]	; (8000bec <DriverTask+0x13c>)
 8000b4a:	f7ff fcf4 	bl	8000536 <BUTTON_IsPressed>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d038      	beq.n	8000bc6 <DriverTask+0x116>
			Mode = DOWN;
 8000b54:	2303      	movs	r3, #3
 8000b56:	60fb      	str	r3, [r7, #12]
			xQueueSendToBack(xQueue, &Mode, 0);
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <DriverTask+0x134>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	f107 010c 	add.w	r1, r7, #12
 8000b60:	2300      	movs	r3, #0
 8000b62:	2200      	movs	r2, #0
 8000b64:	f001 fd62 	bl	800262c <xQueueGenericSend>
			vTaskDelay(400); // Debounce delay
 8000b68:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b6c:	f002 fb92 	bl	8003294 <vTaskDelay>

			if (BUTTON_IsPressed(&DriverDownButton)) {  // Manual Mode
 8000b70:	481e      	ldr	r0, [pc, #120]	; (8000bec <DriverTask+0x13c>)
 8000b72:	f7ff fce0 	bl	8000536 <BUTTON_IsPressed>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00d      	beq.n	8000b98 <DriverTask+0xe8>
				PWC_motorControl(DOWN);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f7ff ff0d 	bl	800099c <PWC_motorControl>
				while (BUTTON_IsPressed(&DriverDownButton))
 8000b82:	bf00      	nop
 8000b84:	4819      	ldr	r0, [pc, #100]	; (8000bec <DriverTask+0x13c>)
 8000b86:	f7ff fcd6 	bl	8000536 <BUTTON_IsPressed>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1f9      	bne.n	8000b84 <DriverTask+0xd4>
					;
				PWC_motorControl(OFF);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff ff03 	bl	800099c <PWC_motorControl>
 8000b96:	e00c      	b.n	8000bb2 <DriverTask+0x102>
			} else { 								// Automatic Mode
				PWC_motorControl(DOWN);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f7ff feff 	bl	800099c <PWC_motorControl>
				while (!LimitSwitch_IsPressed(&LimitDownSwitch))
 8000b9e:	bf00      	nop
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <DriverTask+0x140>)
 8000ba2:	f7ff fdd9 	bl	8000758 <LimitSwitch_IsPressed>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f9      	beq.n	8000ba0 <DriverTask+0xf0>
					;
				PWC_motorControl(OFF);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff fef5 	bl	800099c <PWC_motorControl>
			}
			Mode = OFF;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
			xQueueSendToBack(xQueue, &Mode, 0);
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <DriverTask+0x134>)
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	f107 010c 	add.w	r1, r7, #12
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f001 fd33 	bl	800262c <xQueueGenericSend>
		}

		xSemaphoreGive(xMotorMutex);
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <DriverTask+0x12c>)
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f001 fd2c 	bl	800262c <xQueueGenericSend>
		HAL_Delay(200);
 8000bd4:	20c8      	movs	r0, #200	; 0xc8
 8000bd6:	f000 fae5 	bl	80011a4 <HAL_Delay>
		xSemaphoreTake(xMotorMutex, portMAX_DELAY);
 8000bda:	e76f      	b.n	8000abc <DriverTask+0xc>
 8000bdc:	200002e0 	.word	0x200002e0
 8000be0:	20000000 	.word	0x20000000
 8000be4:	200002e8 	.word	0x200002e8
 8000be8:	20000030 	.word	0x20000030
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000038 	.word	0x20000038

08000bf4 <PassengerTask>:

	}
}

void PassengerTask(void *pvParamters) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	int Mode = OFF;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]

	for (;;) {

		xSemaphoreTake(xMotorMutex, portMAX_DELAY);
 8000c00:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <PassengerTask+0x12c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 ff7b 	bl	8002b04 <xQueueSemaphoreTake>

		//Handle the Up Button
		if (BUTTON_IsPressed(&PassengerUpButton)) {
 8000c0e:	4845      	ldr	r0, [pc, #276]	; (8000d24 <PassengerTask+0x130>)
 8000c10:	f7ff fc91 	bl	8000536 <BUTTON_IsPressed>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d038      	beq.n	8000c8c <PassengerTask+0x98>
			Mode = UP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	60fb      	str	r3, [r7, #12]
			xQueueSendToBack(xQueue, &Mode, 0);
 8000c1e:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <PassengerTask+0x134>)
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	f107 010c 	add.w	r1, r7, #12
 8000c26:	2300      	movs	r3, #0
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f001 fcff 	bl	800262c <xQueueGenericSend>
			vTaskDelay(400); // Debounce delay
 8000c2e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c32:	f002 fb2f 	bl	8003294 <vTaskDelay>

			if (BUTTON_IsPressed(&PassengerUpButton)) {  // Manual Mode
 8000c36:	483b      	ldr	r0, [pc, #236]	; (8000d24 <PassengerTask+0x130>)
 8000c38:	f7ff fc7d 	bl	8000536 <BUTTON_IsPressed>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00d      	beq.n	8000c5e <PassengerTask+0x6a>
				PWC_motorControl(UP);
 8000c42:	2002      	movs	r0, #2
 8000c44:	f7ff feaa 	bl	800099c <PWC_motorControl>
				while (BUTTON_IsPressed(&PassengerUpButton))
 8000c48:	bf00      	nop
 8000c4a:	4836      	ldr	r0, [pc, #216]	; (8000d24 <PassengerTask+0x130>)
 8000c4c:	f7ff fc73 	bl	8000536 <BUTTON_IsPressed>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f9      	bne.n	8000c4a <PassengerTask+0x56>
					;
				PWC_motorControl(OFF);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fea0 	bl	800099c <PWC_motorControl>
 8000c5c:	e00c      	b.n	8000c78 <PassengerTask+0x84>
			} else { // Automatic Mode
				PWC_motorControl(UP);
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fe9c 	bl	800099c <PWC_motorControl>
				while (!LimitSwitch_IsPressed(&LimitUpSwitch))
 8000c64:	bf00      	nop
 8000c66:	4831      	ldr	r0, [pc, #196]	; (8000d2c <PassengerTask+0x138>)
 8000c68:	f7ff fd76 	bl	8000758 <LimitSwitch_IsPressed>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f9      	beq.n	8000c66 <PassengerTask+0x72>
					;
				PWC_motorControl(OFF);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fe92 	bl	800099c <PWC_motorControl>
			}
			Mode = OFF;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
			xQueueSendToBack(xQueue, &Mode, 0);
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <PassengerTask+0x134>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	f107 010c 	add.w	r1, r7, #12
 8000c84:	2300      	movs	r3, #0
 8000c86:	2200      	movs	r2, #0
 8000c88:	f001 fcd0 	bl	800262c <xQueueGenericSend>
		}

		//Handle the Down Button
		if (BUTTON_IsPressed(&PassengerDownButton)) {
 8000c8c:	4828      	ldr	r0, [pc, #160]	; (8000d30 <PassengerTask+0x13c>)
 8000c8e:	f7ff fc52 	bl	8000536 <BUTTON_IsPressed>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d038      	beq.n	8000d0a <PassengerTask+0x116>
			Mode = DOWN;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	60fb      	str	r3, [r7, #12]
			xQueueSendToBack(xQueue, &Mode, 0);
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <PassengerTask+0x134>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	f107 010c 	add.w	r1, r7, #12
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f001 fcc0 	bl	800262c <xQueueGenericSend>
			vTaskDelay(400); // Debounce delay
 8000cac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000cb0:	f002 faf0 	bl	8003294 <vTaskDelay>

			if (BUTTON_IsPressed(&PassengerDownButton)) {  // Manual Mode
 8000cb4:	481e      	ldr	r0, [pc, #120]	; (8000d30 <PassengerTask+0x13c>)
 8000cb6:	f7ff fc3e 	bl	8000536 <BUTTON_IsPressed>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00d      	beq.n	8000cdc <PassengerTask+0xe8>
				PWC_motorControl(DOWN);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff fe6b 	bl	800099c <PWC_motorControl>
				while (BUTTON_IsPressed(&PassengerDownButton))
 8000cc6:	bf00      	nop
 8000cc8:	4819      	ldr	r0, [pc, #100]	; (8000d30 <PassengerTask+0x13c>)
 8000cca:	f7ff fc34 	bl	8000536 <BUTTON_IsPressed>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1f9      	bne.n	8000cc8 <PassengerTask+0xd4>
					;
				PWC_motorControl(OFF);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fe61 	bl	800099c <PWC_motorControl>
 8000cda:	e00c      	b.n	8000cf6 <PassengerTask+0x102>
			} else { // Automatic Mode
				PWC_motorControl(DOWN);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f7ff fe5d 	bl	800099c <PWC_motorControl>
				while (!LimitSwitch_IsPressed(&LimitDownSwitch))
 8000ce2:	bf00      	nop
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <PassengerTask+0x140>)
 8000ce6:	f7ff fd37 	bl	8000758 <LimitSwitch_IsPressed>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f9      	beq.n	8000ce4 <PassengerTask+0xf0>
					;
				PWC_motorControl(OFF);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff fe53 	bl	800099c <PWC_motorControl>
			}
			Mode = OFF;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
			xQueueSendToBack(xQueue, &Mode, 0);
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <PassengerTask+0x134>)
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	f107 010c 	add.w	r1, r7, #12
 8000d02:	2300      	movs	r3, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	f001 fc91 	bl	800262c <xQueueGenericSend>
		}

		xSemaphoreGive(xMotorMutex);
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <PassengerTask+0x12c>)
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	f001 fc8a 	bl	800262c <xQueueGenericSend>
		HAL_Delay(200);
 8000d18:	20c8      	movs	r0, #200	; 0xc8
 8000d1a:	f000 fa43 	bl	80011a4 <HAL_Delay>
		xSemaphoreTake(xMotorMutex, portMAX_DELAY);
 8000d1e:	e76f      	b.n	8000c00 <PassengerTask+0xc>
 8000d20:	200002e0 	.word	0x200002e0
 8000d24:	20000010 	.word	0x20000010
 8000d28:	200002e8 	.word	0x200002e8
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	20000018 	.word	0x20000018
 8000d34:	20000038 	.word	0x20000038

08000d38 <EXTI_Initialization>:
		//timer0_Delay(200); // Task delay

	}
}

void EXTI_Initialization() {
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	//lock
	exti_configA.Line = EXTI_LINE_2;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <EXTI_Initialization+0x40>)
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <EXTI_Initialization+0x44>)
 8000d40:	601a      	str	r2, [r3, #0]
	exti_configA.Mode = EXTI_MODE_INTERRUPT;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <EXTI_Initialization+0x40>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	605a      	str	r2, [r3, #4]
	exti_configA.Trigger = EXTI_TRIGGER_RISING;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <EXTI_Initialization+0x40>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	609a      	str	r2, [r3, #8]
	exti_configA.GPIOSel = EXTI_GPIOD;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <EXTI_Initialization+0x40>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	60da      	str	r2, [r3, #12]

//jam
	exti_configB.Line = EXTI_LINE_3;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <EXTI_Initialization+0x48>)
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <EXTI_Initialization+0x4c>)
 8000d58:	601a      	str	r2, [r3, #0]
	exti_configB.Mode = EXTI_MODE_INTERRUPT;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <EXTI_Initialization+0x48>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	605a      	str	r2, [r3, #4]
	exti_configB.Trigger = EXTI_TRIGGER_RISING;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <EXTI_Initialization+0x48>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	609a      	str	r2, [r3, #8]
	exti_configB.GPIOSel = EXTI_GPIOD;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <EXTI_Initialization+0x48>)
 8000d68:	2203      	movs	r2, #3
 8000d6a:	60da      	str	r2, [r3, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200002f4 	.word	0x200002f4
 8000d7c:	06000002 	.word	0x06000002
 8000d80:	2000030c 	.word	0x2000030c
 8000d84:	06000003 	.word	0x06000003

08000d88 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d8c:	2004      	movs	r0, #4
 8000d8e:	f000 fde9 	bl	8001964 <HAL_GPIO_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&hextiA);
 8000d92:	4802      	ldr	r0, [pc, #8]	; (8000d9c <EXTI2_IRQHandler+0x14>)
 8000d94:	f000 fbe4 	bl	8001560 <HAL_EXTI_IRQHandler>
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200002ec 	.word	0x200002ec

08000da0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000da4:	2008      	movs	r0, #8
 8000da6:	f000 fddd 	bl	8001964 <HAL_GPIO_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&hextiB);
 8000daa:	4802      	ldr	r0, [pc, #8]	; (8000db4 <EXTI3_IRQHandler+0x14>)
 8000dac:	f000 fbd8 	bl	8001560 <HAL_EXTI_IRQHandler>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000304 	.word	0x20000304

08000db8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]

// this is what you want to do when the interrupt happen

	if (GPIO_Pin == GPIO_PIN_2) {
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d115      	bne.n	8000df4 <HAL_GPIO_EXTI_Callback+0x3c>
		// lock button

		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(xLockSemaphore, &xHigherPriorityTaskWoken); // Give lock semaphore from ISR
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_GPIO_EXTI_Callback+0x74>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f107 020c 	add.w	r2, r7, #12
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fd26 	bl	8002828 <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken); // End ISR, possibly switching to a higher priority task
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d020      	beq.n	8000e24 <HAL_GPIO_EXTI_Callback+0x6c>
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x78>)
 8000de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	f3bf 8f4f 	dsb	sy
 8000dee:	f3bf 8f6f 	isb	sy
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
		xSemaphoreGiveFromISR(xJamSemaphore, &xHigherPriorityTaskWoken); // Give binary semaphore from ISR
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken); // End ISR, possibly switching to a higher priority task
	}

}
 8000df2:	e017      	b.n	8000e24 <HAL_GPIO_EXTI_Callback+0x6c>
	else if (GPIO_Pin == GPIO_PIN_3) {
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d114      	bne.n	8000e24 <HAL_GPIO_EXTI_Callback+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
		xSemaphoreGiveFromISR(xJamSemaphore, &xHigherPriorityTaskWoken); // Give binary semaphore from ISR
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f107 0208 	add.w	r2, r7, #8
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fd0d 	bl	8002828 <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken); // End ISR, possibly switching to a higher priority task
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_EXTI_Callback+0x6c>
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x78>)
 8000e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	f3bf 8f4f 	dsb	sy
 8000e20:	f3bf 8f6f 	isb	sy
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200002d4 	.word	0x200002d4
 8000e30:	e000ed04 	.word	0xe000ed04
 8000e34:	200002dc 	.word	0x200002dc

08000e38 <MX_NVIC_Init>:

static void MX_NVIC_Init(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

	//lock
	HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 7);
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	2107      	movs	r1, #7
 8000e40:	2008      	movs	r0, #8
 8000e42:	f000 faae 	bl	80013a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e46:	2008      	movs	r0, #8
 8000e48:	f000 fac7 	bl	80013da <HAL_NVIC_EnableIRQ>

	//jam
	HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 6);
 8000e4c:	2206      	movs	r2, #6
 8000e4e:	2106      	movs	r1, #6
 8000e50:	2009      	movs	r0, #9
 8000e52:	f000 faa6 	bl	80013a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e56:	2009      	movs	r0, #9
 8000e58:	f000 fabf 	bl	80013da <HAL_NVIC_EnableIRQ>

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b094      	sub	sp, #80	; 0x50
 8000e64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2230      	movs	r2, #48	; 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fd44 	bl	80048fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <SystemClock_Config+0xb8>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <SystemClock_Config+0xb8>)
 8000e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <SystemClock_Config+0xb8>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <SystemClock_Config+0xbc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <SystemClock_Config+0xbc>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <SystemClock_Config+0xbc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fd5d 	bl	8001994 <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x84>
		Error_Handler();
 8000ee0:	f000 f85c 	bl	8000f9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 ffc0 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xae>
		Error_Handler();
 8000f0a:	f000 f847 	bl	8000f9c <Error_Handler>
	}
}
 8000f0e:	bf00      	nop
 8000f10:	3750      	adds	r7, #80	; 0x50
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40007000 	.word	0x40007000

08000f20 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a16      	ldr	r2, [pc, #88]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800

08000f8c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 f98c 	bl	80022b2 <osDelay>
 8000f9a:	e7fb      	b.n	8000f94 <StartDefaultTask+0x8>

08000f9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_MspInit+0x54>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <HAL_MspInit+0x54>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_MspInit+0x54>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_MspInit+0x54>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_MspInit+0x54>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_MspInit+0x54>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	210f      	movs	r1, #15
 8000fea:	f06f 0001 	mvn.w	r0, #1
 8000fee:	f000 f9d8 	bl	80013a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f898 	bl	8001164 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001034:	f002 fe0a 	bl	8003c4c <xTaskGetSchedulerState>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d001      	beq.n	8001042 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800103e:	f003 f9e3 	bl	8004408 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001070:	f7ff ffea 	bl	8001048 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	; (80010b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800109a:	f003 fc37 	bl	800490c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fb71 	bl	8000784 <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010a4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010b0:	08004a10 	.word	0x08004a10
  ldr r2, =_sbss
 80010b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010b8:	20004074 	.word	0x20004074

080010bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f94f 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff ff58 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f967 	bl	80013f6 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f92f 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000050 	.word	0x20000050
 800115c:	20000058 	.word	0x20000058
 8001160:	20000054 	.word	0x20000054

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000058 	.word	0x20000058
 8001188:	2000031c 	.word	0x2000031c

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000031c 	.word	0x2000031c

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000058 	.word	0x20000058

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <__NVIC_EnableIRQ+0x38>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff29 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff3e 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff8e 	bl	80012e0 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff31 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa2 	bl	8001348 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <HAL_EXTI_SetConfigLine+0x16>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e08f      	b.n	800154a <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800143c:	2201      	movs	r2, #1
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d052      	beq.n	80014f8 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	493d      	ldr	r1, [pc, #244]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
 800146a:	e006      	b.n	800147a <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	4938      	ldr	r1, [pc, #224]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 8001476:	4013      	ands	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	4933      	ldr	r1, [pc, #204]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	60cb      	str	r3, [r1, #12]
 8001492:	e006      	b.n	80014a2 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	492e      	ldr	r1, [pc, #184]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 800149e:	4013      	ands	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80014aa:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80014ae:	d123      	bne.n	80014f8 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 80014b0:	4a2a      	ldr	r2, [pc, #168]	; (800155c <HAL_EXTI_SetConfigLine+0x14c>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 80014ea:	491c      	ldr	r1, [pc, #112]	; (800155c <HAL_EXTI_SetConfigLine+0x14c>)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4913      	ldr	r1, [pc, #76]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	e006      	b.n	8001520 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	490f      	ldr	r1, [pc, #60]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 800151c:	4013      	ands	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4909      	ldr	r1, [pc, #36]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
 8001538:	e006      	b.n	8001548 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	4905      	ldr	r1, [pc, #20]	; (8001558 <HAL_EXTI_SetConfigLine+0x148>)
 8001544:	4013      	ands	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40013c00 	.word	0x40013c00
 800155c:	40013800 	.word	0x40013800

08001560 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	2201      	movs	r2, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_EXTI_IRQHandler+0x44>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_EXTI_IRQHandler+0x44>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4798      	blx	r3
    }
  }
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40013c00 	.word	0x40013c00

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e177      	b.n	80018b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 8166 	bne.w	80018ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80c0 	beq.w	80018ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a65      	ldr	r2, [pc, #404]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a61      	ldr	r2, [pc, #388]	; (80018d0 <HAL_GPIO_Init+0x328>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_GPIO_Init+0x32c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d037      	beq.n	80017e6 <HAL_GPIO_Init+0x23e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a57      	ldr	r2, [pc, #348]	; (80018d8 <HAL_GPIO_Init+0x330>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d031      	beq.n	80017e2 <HAL_GPIO_Init+0x23a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a56      	ldr	r2, [pc, #344]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d02b      	beq.n	80017de <HAL_GPIO_Init+0x236>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a55      	ldr	r2, [pc, #340]	; (80018e0 <HAL_GPIO_Init+0x338>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x232>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a54      	ldr	r2, [pc, #336]	; (80018e4 <HAL_GPIO_Init+0x33c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x22e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a53      	ldr	r2, [pc, #332]	; (80018e8 <HAL_GPIO_Init+0x340>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x22a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_GPIO_Init+0x344>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x226>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a51      	ldr	r2, [pc, #324]	; (80018f0 <HAL_GPIO_Init+0x348>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x222>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a50      	ldr	r2, [pc, #320]	; (80018f4 <HAL_GPIO_Init+0x34c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x21e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_GPIO_Init+0x350>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x21a>
 80017be:	2309      	movs	r3, #9
 80017c0:	e012      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017c2:	230a      	movs	r3, #10
 80017c4:	e010      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017c6:	2308      	movs	r3, #8
 80017c8:	e00e      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017ca:	2307      	movs	r3, #7
 80017cc:	e00c      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017ce:	2306      	movs	r3, #6
 80017d0:	e00a      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e008      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017d6:	2304      	movs	r3, #4
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017da:	2303      	movs	r3, #3
 80017dc:	e004      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017de:	2302      	movs	r3, #2
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017e6:	2300      	movs	r3, #0
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	f002 0203 	and.w	r2, r2, #3
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4093      	lsls	r3, r2
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <HAL_GPIO_Init+0x328>)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800182a:	4a34      	ldr	r2, [pc, #208]	; (80018fc <HAL_GPIO_Init+0x354>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001854:	4a29      	ldr	r2, [pc, #164]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_GPIO_Init+0x354>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <HAL_GPIO_Init+0x354>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	f67f ae84 	bls.w	80015c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40021400 	.word	0x40021400
 80018ec:	40021800 	.word	0x40021800
 80018f0:	40021c00 	.word	0x40021c00
 80018f4:	40022000 	.word	0x40022000
 80018f8:	40022400 	.word	0x40022400
 80018fc:	40013c00 	.word	0x40013c00

08001900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800194c:	e003      	b.n	8001956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	041a      	lsls	r2, r3, #16
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	619a      	str	r2, [r3, #24]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fa18 	bl	8000db8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40013c00 	.word	0x40013c00

08001994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e267      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d075      	beq.n	8001a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019b2:	4b88      	ldr	r3, [pc, #544]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d00c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019be:	4b85      	ldr	r3, [pc, #532]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d112      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ca:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d6:	d10b      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	4b7e      	ldr	r3, [pc, #504]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d05b      	beq.n	8001a9c <HAL_RCC_OscConfig+0x108>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d157      	bne.n	8001a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e242      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d106      	bne.n	8001a08 <HAL_RCC_OscConfig+0x74>
 80019fa:	4b76      	ldr	r3, [pc, #472]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a75      	ldr	r2, [pc, #468]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e01d      	b.n	8001a44 <HAL_RCC_OscConfig+0xb0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x98>
 8001a12:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6f      	ldr	r2, [pc, #444]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a6c      	ldr	r2, [pc, #432]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0xb0>
 8001a2c:	4b69      	ldr	r3, [pc, #420]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a68      	ldr	r2, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a65      	ldr	r2, [pc, #404]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fb9e 	bl	800118c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fb9a 	bl	800118c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e207      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0xc0>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fb8a 	bl	800118c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fb86 	bl	800118c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1f3      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0xe8>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d063      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d11c      	bne.n	8001afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac2:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x152>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1c7      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4937      	ldr	r1, [pc, #220]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	e03a      	b.n	8001b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b04:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_OscConfig+0x244>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fb3f 	bl	800118c <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff fb3b 	bl	800118c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1a8      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4925      	ldr	r1, [pc, #148]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_OscConfig+0x244>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fb1e 	bl	800118c <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff fb1a 	bl	800118c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e187      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d036      	beq.n	8001bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_RCC_OscConfig+0x248>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff fafe 	bl	800118c <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b94:	f7ff fafa 	bl	800118c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e167      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x200>
 8001bb2:	e01b      	b.n	8001bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_OscConfig+0x248>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7ff fae7 	bl	800118c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc0:	e00e      	b.n	8001be0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fae3 	bl	800118c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d907      	bls.n	8001be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e150      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	42470000 	.word	0x42470000
 8001bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ea      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8097 	beq.w	8001d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a7c      	ldr	r2, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	4b77      	ldr	r3, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x474>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d118      	bne.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c36:	4b74      	ldr	r3, [pc, #464]	; (8001e08 <HAL_RCC_OscConfig+0x474>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a73      	ldr	r2, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x474>)
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c42:	f7ff faa3 	bl	800118c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4a:	f7ff fa9f 	bl	800118c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e10c      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x474>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2ea>
 8001c70:	4b64      	ldr	r3, [pc, #400]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a63      	ldr	r2, [pc, #396]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7c:	e01c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x324>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x30c>
 8001c86:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a5e      	ldr	r2, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	4b5c      	ldr	r3, [pc, #368]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a5b      	ldr	r2, [pc, #364]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x324>
 8001ca0:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a57      	ldr	r2, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cac:	4b55      	ldr	r3, [pc, #340]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	f023 0304 	bic.w	r3, r3, #4
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d015      	beq.n	8001cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fa64 	bl	800118c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fa60 	bl	800118c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0cb      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	4b49      	ldr	r3, [pc, #292]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0ee      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x334>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7ff fa4e 	bl	800118c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fa4a 	bl	800118c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0b5      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ee      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	4a38      	ldr	r2, [pc, #224]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80a1 	beq.w	8001e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d05c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d141      	bne.n	8001dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_OscConfig+0x478>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fa1e 	bl	800118c <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff fa1a 	bl	800118c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e087      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	019b      	lsls	r3, r3, #6
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	491b      	ldr	r1, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x478>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f9f3 	bl	800118c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f9ef 	bl	800118c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e05c      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x416>
 8001dc8:	e054      	b.n	8001e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x478>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f9dc 	bl	800118c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f9d8 	bl	800118c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e045      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x444>
 8001df6:	e03d      	b.n	8001e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e038      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x4ec>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d028      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d121      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d11a      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e40:	4013      	ands	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d111      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0cc      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d90c      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b65      	ldr	r3, [pc, #404]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d044      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d119      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e067      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b37      	ldr	r3, [pc, #220]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4934      	ldr	r1, [pc, #208]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7ff f90a 	bl	800118c <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff f906 	bl	800118c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e04f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d20c      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4602      	mov	r2, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	490a      	ldr	r1, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	5ccb      	ldrb	r3, [r1, r3]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f86a 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00
 8002040:	40023800 	.word	0x40023800
 8002044:	080049f0 	.word	0x080049f0
 8002048:	20000050 	.word	0x20000050
 800204c:	20000054 	.word	0x20000054

08002050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002054:	b090      	sub	sp, #64	; 0x40
 8002056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
 800205c:	2300      	movs	r3, #0
 800205e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002060:	2300      	movs	r3, #0
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d00d      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x40>
 8002074:	2b08      	cmp	r3, #8
 8002076:	f200 80a1 	bhi.w	80021bc <HAL_RCC_GetSysClockFreq+0x16c>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x34>
 800207e:	2b04      	cmp	r3, #4
 8002080:	d003      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0x3a>
 8002082:	e09b      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002088:	e09b      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800208c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800208e:	e098      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002090:	4b4f      	ldr	r3, [pc, #316]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800209a:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d028      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a6:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	2200      	movs	r2, #0
 80020ae:	623b      	str	r3, [r7, #32]
 80020b0:	627a      	str	r2, [r7, #36]	; 0x24
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020b8:	2100      	movs	r1, #0
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020bc:	fb03 f201 	mul.w	r2, r3, r1
 80020c0:	2300      	movs	r3, #0
 80020c2:	fb00 f303 	mul.w	r3, r0, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	4a43      	ldr	r2, [pc, #268]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020ca:	fba0 1202 	umull	r1, r2, r0, r2
 80020ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020d0:	460a      	mov	r2, r1
 80020d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80020d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d6:	4413      	add	r3, r2
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020dc:	2200      	movs	r2, #0
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	61fa      	str	r2, [r7, #28]
 80020e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020ea:	f7fe f881 	bl	80001f0 <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4613      	mov	r3, r2
 80020f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f6:	e053      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f8:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	2200      	movs	r2, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	617a      	str	r2, [r7, #20]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800210a:	f04f 0b00 	mov.w	fp, #0
 800210e:	4652      	mov	r2, sl
 8002110:	465b      	mov	r3, fp
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	f04f 0100 	mov.w	r1, #0
 800211a:	0159      	lsls	r1, r3, #5
 800211c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002120:	0150      	lsls	r0, r2, #5
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	ebb2 080a 	subs.w	r8, r2, sl
 800212a:	eb63 090b 	sbc.w	r9, r3, fp
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800213a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800213e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002142:	ebb2 0408 	subs.w	r4, r2, r8
 8002146:	eb63 0509 	sbc.w	r5, r3, r9
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	00eb      	lsls	r3, r5, #3
 8002154:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002158:	00e2      	lsls	r2, r4, #3
 800215a:	4614      	mov	r4, r2
 800215c:	461d      	mov	r5, r3
 800215e:	eb14 030a 	adds.w	r3, r4, sl
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	eb45 030b 	adc.w	r3, r5, fp
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002176:	4629      	mov	r1, r5
 8002178:	028b      	lsls	r3, r1, #10
 800217a:	4621      	mov	r1, r4
 800217c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002180:	4621      	mov	r1, r4
 8002182:	028a      	lsls	r2, r1, #10
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	2200      	movs	r2, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	60fa      	str	r2, [r7, #12]
 8002190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002194:	f7fe f82c 	bl	80001f0 <__aeabi_uldivmod>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4613      	mov	r3, r2
 800219e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	3301      	adds	r3, #1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021ba:	e002      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80021be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3740      	adds	r7, #64	; 0x40
 80021c8:	46bd      	mov	sp, r7
 80021ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	00f42400 	.word	0x00f42400
 80021d8:	017d7840 	.word	0x017d7840

080021dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ee:	2b84      	cmp	r3, #132	; 0x84
 80021f0:	d005      	beq.n	80021fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80021f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	3303      	adds	r3, #3
 80021fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002210:	f001 f91e 	bl	8003450 <vTaskStartScheduler>
  
  return osOK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}

0800221a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	b089      	sub	sp, #36	; 0x24
 800221e:	af04      	add	r7, sp, #16
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <osThreadCreate+0x54>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01c      	beq.n	800226e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685c      	ldr	r4, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691e      	ldr	r6, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ffc8 	bl	80021dc <makeFreeRtosPriority>
 800224c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002256:	9202      	str	r2, [sp, #8]
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	9100      	str	r1, [sp, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4632      	mov	r2, r6
 8002260:	4629      	mov	r1, r5
 8002262:	4620      	mov	r0, r4
 8002264:	f000 fe82 	bl	8002f6c <xTaskCreateStatic>
 8002268:	4603      	mov	r3, r0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e01c      	b.n	80022a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685c      	ldr	r4, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800227a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ffaa 	bl	80021dc <makeFreeRtosPriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	9200      	str	r2, [sp, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	4632      	mov	r2, r6
 8002296:	4629      	mov	r1, r5
 8002298:	4620      	mov	r0, r4
 800229a:	f000 fec4 	bl	8003026 <xTaskCreate>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d001      	beq.n	80022a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e000      	b.n	80022aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80022a8:	68fb      	ldr	r3, [r7, #12]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <osDelay+0x16>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	e000      	b.n	80022ca <osDelay+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 ffe2 	bl	8003294 <vTaskDelay>
  
  return osOK;
 80022d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 0208 	add.w	r2, r3, #8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f04f 32ff 	mov.w	r2, #4294967295
 80022f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0208 	add.w	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f103 0208 	add.w	r2, r3, #8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d103      	bne.n	800239c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e00c      	b.n	80023b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3308      	adds	r3, #8
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e002      	b.n	80023aa <vListInsert+0x2e>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d2f6      	bcs.n	80023a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6892      	ldr	r2, [r2, #8]
 8002404:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6852      	ldr	r2, [r2, #4]
 800240e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d103      	bne.n	8002422 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800246a:	bf00      	nop
 800246c:	e7fe      	b.n	800246c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800246e:	f001 ff39 	bl	80042e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	68f9      	ldr	r1, [r7, #12]
 800247c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	441a      	add	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	3b01      	subs	r3, #1
 80024a0:	68f9      	ldr	r1, [r7, #12]
 80024a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	441a      	add	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	22ff      	movs	r2, #255	; 0xff
 80024b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	22ff      	movs	r2, #255	; 0xff
 80024ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d114      	bne.n	80024ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01a      	beq.n	8002502 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3310      	adds	r3, #16
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 f9ff 	bl	80038d4 <xTaskRemoveFromEventList>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d012      	beq.n	8002502 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <xQueueGenericReset+0xcc>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	e009      	b.n	8002502 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3310      	adds	r3, #16
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fef1 	bl	80022da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3324      	adds	r3, #36	; 0x24
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff feec 	bl	80022da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002502:	f001 ff1f 	bl	8004344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	e000ed04 	.word	0xe000ed04

08002514 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	613b      	str	r3, [r7, #16]
}
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3348      	adds	r3, #72	; 0x48
 800254c:	4618      	mov	r0, r3
 800254e:	f001 ffeb 	bl	8004528 <pvPortMalloc>
 8002552:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d011      	beq.n	800257e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3348      	adds	r3, #72	; 0x48
 8002562:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800256c:	79fa      	ldrb	r2, [r7, #7]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	4613      	mov	r3, r2
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f805 	bl	8002588 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800257e:	69bb      	ldr	r3, [r7, #24]
	}
 8002580:	4618      	mov	r0, r3
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e002      	b.n	80025aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025b6:	2101      	movs	r1, #1
 80025b8:	69b8      	ldr	r0, [r7, #24]
 80025ba:	f7ff ff43 	bl	8002444 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00e      	beq.n	80025f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80025e6:	2300      	movs	r3, #0
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f81d 	bl	800262c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b086      	sub	sp, #24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002604:	2301      	movs	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	461a      	mov	r2, r3
 8002610:	6939      	ldr	r1, [r7, #16]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff7e 	bl	8002514 <xQueueGenericCreate>
 8002618:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff ffd3 	bl	80025c6 <prvInitialiseMutex>

		return xNewQueue;
 8002620:	68fb      	ldr	r3, [r7, #12]
	}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08e      	sub	sp, #56	; 0x38
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800263a:	2300      	movs	r3, #0
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xQueueGenericSend+0x32>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <xQueueGenericSend+0x40>
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <xQueueGenericSend+0x44>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <xQueueGenericSend+0x46>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <xQueueGenericSend+0x60>
	__asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d103      	bne.n	800269a <xQueueGenericSend+0x6e>
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <xQueueGenericSend+0x72>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <xQueueGenericSend+0x74>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <xQueueGenericSend+0x8e>
	__asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	623b      	str	r3, [r7, #32]
}
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026ba:	f001 fac7 	bl	8003c4c <xTaskGetSchedulerState>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <xQueueGenericSend+0x9e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <xQueueGenericSend+0xa2>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <xQueueGenericSend+0xa4>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <xQueueGenericSend+0xbe>
	__asm volatile
 80026d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	61fb      	str	r3, [r7, #28]
}
 80026e6:	bf00      	nop
 80026e8:	e7fe      	b.n	80026e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026ea:	f001 fdfb 	bl	80042e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <xQueueGenericSend+0xd4>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d129      	bne.n	8002754 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002706:	f000 fb21 	bl	8002d4c <prvCopyDataToQueue>
 800270a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d010      	beq.n	8002736 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	3324      	adds	r3, #36	; 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f001 f8db 	bl	80038d4 <xTaskRemoveFromEventList>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002724:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <xQueueGenericSend+0x1f8>)
 8002726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	e00a      	b.n	800274c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800273c:	4b39      	ldr	r3, [pc, #228]	; (8002824 <xQueueGenericSend+0x1f8>)
 800273e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800274c:	f001 fdfa 	bl	8004344 <vPortExitCritical>
				return pdPASS;
 8002750:	2301      	movs	r3, #1
 8002752:	e063      	b.n	800281c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800275a:	f001 fdf3 	bl	8004344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800275e:	2300      	movs	r3, #0
 8002760:	e05c      	b.n	800281c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	2b00      	cmp	r3, #0
 8002766:	d106      	bne.n	8002776 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4618      	mov	r0, r3
 800276e:	f001 f913 	bl	8003998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002772:	2301      	movs	r3, #1
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002776:	f001 fde5 	bl	8004344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800277a:	f000 fec9 	bl	8003510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800277e:	f001 fdb1 	bl	80042e4 <vPortEnterCritical>
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002788:	b25b      	sxtb	r3, r3
 800278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278e:	d103      	bne.n	8002798 <xQueueGenericSend+0x16c>
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800279e:	b25b      	sxtb	r3, r3
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d103      	bne.n	80027ae <xQueueGenericSend+0x182>
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ae:	f001 fdc9 	bl	8004344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027b2:	1d3a      	adds	r2, r7, #4
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 f902 	bl	80039c4 <xTaskCheckForTimeOut>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d124      	bne.n	8002810 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027c8:	f000 fbb8 	bl	8002f3c <prvIsQueueFull>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d018      	beq.n	8002804 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	3310      	adds	r3, #16
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 f856 	bl	800388c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80027e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e2:	f000 fb43 	bl	8002e6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80027e6:	f000 fea1 	bl	800352c <xTaskResumeAll>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f47f af7c 	bne.w	80026ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <xQueueGenericSend+0x1f8>)
 80027f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	e772      	b.n	80026ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002806:	f000 fb31 	bl	8002e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800280a:	f000 fe8f 	bl	800352c <xTaskResumeAll>
 800280e:	e76c      	b.n	80026ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002812:	f000 fb2b 	bl	8002e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002816:	f000 fe89 	bl	800352c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800281a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800281c:	4618      	mov	r0, r3
 800281e:	3738      	adds	r7, #56	; 0x38
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08e      	sub	sp, #56	; 0x38
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	623b      	str	r3, [r7, #32]
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <xQueueGiveFromISR+0x48>
	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	61fb      	str	r3, [r7, #28]
}
 800286c:	bf00      	nop
 800286e:	e7fe      	b.n	800286e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <xQueueGiveFromISR+0x58>
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <xQueueGiveFromISR+0x5c>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <xQueueGiveFromISR+0x5e>
 8002884:	2300      	movs	r3, #0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	61bb      	str	r3, [r7, #24]
}
 800289c:	bf00      	nop
 800289e:	e7fe      	b.n	800289e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028a0:	f001 fe02 	bl	80044a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80028a4:	f3ef 8211 	mrs	r2, BASEPRI
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	617a      	str	r2, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80028bc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d22b      	bcs.n	8002928 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ea:	d112      	bne.n	8002912 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d016      	beq.n	8002922 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	3324      	adds	r3, #36	; 0x24
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 ffeb 	bl	80038d4 <xTaskRemoveFromEventList>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00e      	beq.n	8002922 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e007      	b.n	8002922 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002916:	3301      	adds	r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	b25a      	sxtb	r2, r3
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002922:	2301      	movs	r3, #1
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	e001      	b.n	800292c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
 800292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002936:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800293a:	4618      	mov	r0, r3
 800293c:	3738      	adds	r7, #56	; 0x38
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	; 0x30
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <xQueueReceive+0x30>
	__asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	623b      	str	r3, [r7, #32]
}
 8002970:	bf00      	nop
 8002972:	e7fe      	b.n	8002972 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <xQueueReceive+0x3e>
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <xQueueReceive+0x42>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <xQueueReceive+0x44>
 8002986:	2300      	movs	r3, #0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <xQueueReceive+0x5e>
	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	61fb      	str	r3, [r7, #28]
}
 800299e:	bf00      	nop
 80029a0:	e7fe      	b.n	80029a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029a2:	f001 f953 	bl	8003c4c <xTaskGetSchedulerState>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <xQueueReceive+0x6e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <xQueueReceive+0x72>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <xQueueReceive+0x74>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xQueueReceive+0x8e>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	61bb      	str	r3, [r7, #24]
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029d2:	f001 fc87 	bl	80042e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01f      	beq.n	8002a22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e6:	f000 fa1b 	bl	8002e20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00f      	beq.n	8002a1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	3310      	adds	r3, #16
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ff68 	bl	80038d4 <xTaskRemoveFromEventList>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <xQueueReceive+0x1bc>)
 8002a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a1a:	f001 fc93 	bl	8004344 <vPortExitCritical>
				return pdPASS;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e069      	b.n	8002af6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d103      	bne.n	8002a30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a28:	f001 fc8c 	bl	8004344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e062      	b.n	8002af6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a36:	f107 0310 	add.w	r3, r7, #16
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 ffac 	bl	8003998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a40:	2301      	movs	r3, #1
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a44:	f001 fc7e 	bl	8004344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a48:	f000 fd62 	bl	8003510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a4c:	f001 fc4a 	bl	80042e4 <vPortEnterCritical>
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a56:	b25b      	sxtb	r3, r3
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d103      	bne.n	8002a66 <xQueueReceive+0x122>
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d103      	bne.n	8002a7c <xQueueReceive+0x138>
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a7c:	f001 fc62 	bl	8004344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a80:	1d3a      	adds	r2, r7, #4
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 ff9b 	bl	80039c4 <xTaskCheckForTimeOut>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d123      	bne.n	8002adc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a96:	f000 fa3b 	bl	8002f10 <prvIsQueueEmpty>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d017      	beq.n	8002ad0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	3324      	adds	r3, #36	; 0x24
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 feef 	bl	800388c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ab0:	f000 f9dc 	bl	8002e6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ab4:	f000 fd3a 	bl	800352c <xTaskResumeAll>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d189      	bne.n	80029d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <xQueueReceive+0x1bc>)
 8002ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	e780      	b.n	80029d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad2:	f000 f9cb 	bl	8002e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ad6:	f000 fd29 	bl	800352c <xTaskResumeAll>
 8002ada:	e77a      	b.n	80029d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ade:	f000 f9c5 	bl	8002e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ae2:	f000 fd23 	bl	800352c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ae8:	f000 fa12 	bl	8002f10 <prvIsQueueEmpty>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f43f af6f 	beq.w	80029d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002af4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3730      	adds	r7, #48	; 0x30
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	e000ed04 	.word	0xe000ed04

08002b04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08e      	sub	sp, #56	; 0x38
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	623b      	str	r3, [r7, #32]
}
 8002b32:	bf00      	nop
 8002b34:	e7fe      	b.n	8002b34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	61fb      	str	r3, [r7, #28]
}
 8002b50:	bf00      	nop
 8002b52:	e7fe      	b.n	8002b52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b54:	f001 f87a 	bl	8003c4c <xTaskGetSchedulerState>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <xQueueSemaphoreTake+0x60>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <xQueueSemaphoreTake+0x64>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <xQueueSemaphoreTake+0x66>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	61bb      	str	r3, [r7, #24]
}
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b84:	f001 fbae 	bl	80042e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d024      	beq.n	8002bde <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	1e5a      	subs	r2, r3, #1
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002ba4:	f001 f9fa 	bl	8003f9c <pvTaskIncrementMutexHeldCount>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00f      	beq.n	8002bd6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	3310      	adds	r3, #16
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fe8a 	bl	80038d4 <xTaskRemoveFromEventList>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bc6:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <xQueueSemaphoreTake+0x214>)
 8002bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002bd6:	f001 fbb5 	bl	8004344 <vPortExitCritical>
				return pdPASS;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e097      	b.n	8002d0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d111      	bne.n	8002c08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	617b      	str	r3, [r7, #20]
}
 8002bfc:	bf00      	nop
 8002bfe:	e7fe      	b.n	8002bfe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002c00:	f001 fba0 	bl	8004344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e082      	b.n	8002d0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fec0 	bl	8003998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c1c:	f001 fb92 	bl	8004344 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c20:	f000 fc76 	bl	8003510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c24:	f001 fb5e 	bl	80042e4 <vPortEnterCritical>
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d103      	bne.n	8002c3e <xQueueSemaphoreTake+0x13a>
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d103      	bne.n	8002c54 <xQueueSemaphoreTake+0x150>
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c54:	f001 fb76 	bl	8004344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c58:	463a      	mov	r2, r7
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 feaf 	bl	80039c4 <xTaskCheckForTimeOut>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d132      	bne.n	8002cd2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c6e:	f000 f94f 	bl	8002f10 <prvIsQueueEmpty>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d026      	beq.n	8002cc6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002c80:	f001 fb30 	bl	80042e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fffd 	bl	8003c88 <xTaskPriorityInherit>
 8002c8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002c90:	f001 fb58 	bl	8004344 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	3324      	adds	r3, #36	; 0x24
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fdf5 	bl	800388c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ca4:	f000 f8e2 	bl	8002e6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ca8:	f000 fc40 	bl	800352c <xTaskResumeAll>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f47f af68 	bne.w	8002b84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <xQueueSemaphoreTake+0x214>)
 8002cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	e75e      	b.n	8002b84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cc8:	f000 f8d0 	bl	8002e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ccc:	f000 fc2e 	bl	800352c <xTaskResumeAll>
 8002cd0:	e758      	b.n	8002b84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cd4:	f000 f8ca 	bl	8002e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cd8:	f000 fc28 	bl	800352c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cde:	f000 f917 	bl	8002f10 <prvIsQueueEmpty>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f43f af4d 	beq.w	8002b84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002cf0:	f001 faf8 	bl	80042e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cf6:	f000 f811 	bl	8002d1c <prvGetDisinheritPriorityAfterTimeout>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 f8bc 	bl	8003e80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002d08:	f001 fb1c 	bl	8004344 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3738      	adds	r7, #56	; 0x38
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	e000ed04 	.word	0xe000ed04

08002d1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e001      	b.n	8002d3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
	}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d14d      	bne.n	8002e0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fffc 	bl	8003d74 <xTaskPriorityDisinherit>
 8002d7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	e043      	b.n	8002e0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d119      	bne.n	8002dc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6858      	ldr	r0, [r3, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	461a      	mov	r2, r3
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	f001 fddc 	bl	8004954 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	441a      	add	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d32b      	bcc.n	8002e0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	e026      	b.n	8002e0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68d8      	ldr	r0, [r3, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	f001 fdc2 	bl	8004954 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	425b      	negs	r3, r3
 8002dda:	441a      	add	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d207      	bcs.n	8002dfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	425b      	negs	r3, r3
 8002df6:	441a      	add	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d105      	bne.n	8002e0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e16:	697b      	ldr	r3, [r7, #20]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d018      	beq.n	8002e64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	441a      	add	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d303      	bcc.n	8002e54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68d9      	ldr	r1, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6838      	ldr	r0, [r7, #0]
 8002e60:	f001 fd78 	bl	8004954 <memcpy>
	}
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e74:	f001 fa36 	bl	80042e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e80:	e011      	b.n	8002ea6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d012      	beq.n	8002eb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3324      	adds	r3, #36	; 0x24
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fd20 	bl	80038d4 <xTaskRemoveFromEventList>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e9a:	f000 fdf5 	bl	8003a88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	dce9      	bgt.n	8002e82 <prvUnlockQueue+0x16>
 8002eae:	e000      	b.n	8002eb2 <prvUnlockQueue+0x46>
					break;
 8002eb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	22ff      	movs	r2, #255	; 0xff
 8002eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002eba:	f001 fa43 	bl	8004344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ebe:	f001 fa11 	bl	80042e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eca:	e011      	b.n	8002ef0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d012      	beq.n	8002efa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3310      	adds	r3, #16
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fcfb 	bl	80038d4 <xTaskRemoveFromEventList>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ee4:	f000 fdd0 	bl	8003a88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ee8:	7bbb      	ldrb	r3, [r7, #14]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	dce9      	bgt.n	8002ecc <prvUnlockQueue+0x60>
 8002ef8:	e000      	b.n	8002efc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002efa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	22ff      	movs	r2, #255	; 0xff
 8002f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f04:	f001 fa1e 	bl	8004344 <vPortExitCritical>
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f18:	f001 f9e4 	bl	80042e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f24:	2301      	movs	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e001      	b.n	8002f2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f2e:	f001 fa09 	bl	8004344 <vPortExitCritical>

	return xReturn;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f44:	f001 f9ce 	bl	80042e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d102      	bne.n	8002f5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e001      	b.n	8002f5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f5e:	f001 f9f1 	bl	8004344 <vPortExitCritical>

	return xReturn;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08e      	sub	sp, #56	; 0x38
 8002f70:	af04      	add	r7, sp, #16
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	623b      	str	r3, [r7, #32]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	61fb      	str	r3, [r7, #28]
}
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fb2:	2354      	movs	r3, #84	; 0x54
 8002fb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b54      	cmp	r3, #84	; 0x54
 8002fba:	d00a      	beq.n	8002fd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	61bb      	str	r3, [r7, #24]
}
 8002fce:	bf00      	nop
 8002fd0:	e7fe      	b.n	8002fd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002fd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01e      	beq.n	8003018 <xTaskCreateStatic+0xac>
 8002fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9303      	str	r3, [sp, #12]
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	9302      	str	r3, [sp, #8]
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f850 	bl	80030b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003012:	f000 f8d5 	bl	80031c0 <prvAddNewTaskToReadyList>
 8003016:	e001      	b.n	800301c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800301c:	697b      	ldr	r3, [r7, #20]
	}
 800301e:	4618      	mov	r0, r3
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003026:	b580      	push	{r7, lr}
 8003028:	b08c      	sub	sp, #48	; 0x30
 800302a:	af04      	add	r7, sp, #16
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fa74 	bl	8004528 <pvPortMalloc>
 8003040:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003048:	2054      	movs	r0, #84	; 0x54
 800304a:	f001 fa6d 	bl	8004528 <pvPortMalloc>
 800304e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
 800305c:	e005      	b.n	800306a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f001 fb2e 	bl	80046c0 <vPortFree>
 8003064:	e001      	b.n	800306a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003078:	88fa      	ldrh	r2, [r7, #6]
 800307a:	2300      	movs	r3, #0
 800307c:	9303      	str	r3, [sp, #12]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	9302      	str	r3, [sp, #8]
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f80e 	bl	80030b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003094:	69f8      	ldr	r0, [r7, #28]
 8003096:	f000 f893 	bl	80031c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800309a:	2301      	movs	r3, #1
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	e002      	b.n	80030a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295
 80030a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030a6:	69bb      	ldr	r3, [r7, #24]
	}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030c8:	3b01      	subs	r3, #1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f023 0307 	bic.w	r3, r3, #7
 80030d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	617b      	str	r3, [r7, #20]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01f      	beq.n	800313e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e012      	b.n	800312a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	7819      	ldrb	r1, [r3, #0]
 800310c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	3334      	adds	r3, #52	; 0x34
 8003114:	460a      	mov	r2, r1
 8003116:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3301      	adds	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d9e9      	bls.n	8003104 <prvInitialiseNewTask+0x54>
 8003130:	e000      	b.n	8003134 <prvInitialiseNewTask+0x84>
			{
				break;
 8003132:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800313c:	e003      	b.n	8003146 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	2b06      	cmp	r3, #6
 800314a:	d901      	bls.n	8003150 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800314c:	2306      	movs	r3, #6
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800315a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	2200      	movs	r2, #0
 8003160:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	3304      	adds	r3, #4
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f8d7 	bl	800231a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	3318      	adds	r3, #24
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff f8d2 	bl	800231a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	f1c3 0207 	rsb	r2, r3, #7
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	2200      	movs	r2, #0
 8003190:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	68f9      	ldr	r1, [r7, #12]
 800319e:	69b8      	ldr	r0, [r7, #24]
 80031a0:	f000 ff76 	bl	8004090 <pxPortInitialiseStack>
 80031a4:	4602      	mov	r2, r0
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031b6:	bf00      	nop
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031c8:	f001 f88c 	bl	80042e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <prvAddNewTaskToReadyList+0xb8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	4a29      	ldr	r2, [pc, #164]	; (8003278 <prvAddNewTaskToReadyList+0xb8>)
 80031d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <prvAddNewTaskToReadyList+0xbc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031de:	4a27      	ldr	r2, [pc, #156]	; (800327c <prvAddNewTaskToReadyList+0xbc>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031e4:	4b24      	ldr	r3, [pc, #144]	; (8003278 <prvAddNewTaskToReadyList+0xb8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d110      	bne.n	800320e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031ec:	f000 fc70 	bl	8003ad0 <prvInitialiseTaskLists>
 80031f0:	e00d      	b.n	800320e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <prvAddNewTaskToReadyList+0xc0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <prvAddNewTaskToReadyList+0xbc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	429a      	cmp	r2, r3
 8003206:	d802      	bhi.n	800320e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <prvAddNewTaskToReadyList+0xbc>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <prvAddNewTaskToReadyList+0xc4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <prvAddNewTaskToReadyList+0xc4>)
 8003216:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	2201      	movs	r2, #1
 800321e:	409a      	lsls	r2, r3
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <prvAddNewTaskToReadyList+0xc8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	4a18      	ldr	r2, [pc, #96]	; (8003288 <prvAddNewTaskToReadyList+0xc8>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4a15      	ldr	r2, [pc, #84]	; (800328c <prvAddNewTaskToReadyList+0xcc>)
 8003238:	441a      	add	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f7ff f877 	bl	8002334 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003246:	f001 f87d 	bl	8004344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <prvAddNewTaskToReadyList+0xc0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00e      	beq.n	8003270 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <prvAddNewTaskToReadyList+0xbc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	429a      	cmp	r2, r3
 800325e:	d207      	bcs.n	8003270 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <prvAddNewTaskToReadyList+0xd0>)
 8003262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000420 	.word	0x20000420
 800327c:	20000320 	.word	0x20000320
 8003280:	2000042c 	.word	0x2000042c
 8003284:	2000043c 	.word	0x2000043c
 8003288:	20000428 	.word	0x20000428
 800328c:	20000324 	.word	0x20000324
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d017      	beq.n	80032d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <vTaskDelay+0x60>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <vTaskDelay+0x30>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	60bb      	str	r3, [r7, #8]
}
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032c4:	f000 f924 	bl	8003510 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032c8:	2100      	movs	r1, #0
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fe7a 	bl	8003fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032d0:	f000 f92c 	bl	800352c <xTaskResumeAll>
 80032d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d107      	bne.n	80032ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <vTaskDelay+0x64>)
 80032de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000448 	.word	0x20000448
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b06      	cmp	r3, #6
 800330e:	d90a      	bls.n	8003326 <vTaskPrioritySet+0x2a>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	60fb      	str	r3, [r7, #12]
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d901      	bls.n	8003330 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800332c:	2306      	movs	r3, #6
 800332e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003330:	f000 ffd8 	bl	80042e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <vTaskPrioritySet+0x44>
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <vTaskPrioritySet+0x144>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	e000      	b.n	8003342 <vTaskPrioritySet+0x46>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003348:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d06f      	beq.n	8003432 <vTaskPrioritySet+0x136>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	429a      	cmp	r2, r3
 8003358:	d90d      	bls.n	8003376 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800335a:	4b39      	ldr	r3, [pc, #228]	; (8003440 <vTaskPrioritySet+0x144>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	429a      	cmp	r2, r3
 8003362:	d00f      	beq.n	8003384 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003364:	4b36      	ldr	r3, [pc, #216]	; (8003440 <vTaskPrioritySet+0x144>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d309      	bcc.n	8003384 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8003370:	2301      	movs	r3, #1
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	e006      	b.n	8003384 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003376:	4b32      	ldr	r3, [pc, #200]	; (8003440 <vTaskPrioritySet+0x144>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	429a      	cmp	r2, r3
 800337e:	d101      	bne.n	8003384 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003380:	2301      	movs	r3, #1
 8003382:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	429a      	cmp	r2, r3
 8003394:	d102      	bne.n	800339c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	db04      	blt.n	80033b4 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1c3 0207 	rsb	r2, r3, #7
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6959      	ldr	r1, [r3, #20]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4a20      	ldr	r2, [pc, #128]	; (8003444 <vTaskPrioritySet+0x148>)
 80033c4:	4413      	add	r3, r2
 80033c6:	4299      	cmp	r1, r3
 80033c8:	d128      	bne.n	800341c <vTaskPrioritySet+0x120>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff f80d 	bl	80023ee <uxListRemove>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <vTaskPrioritySet+0xf2>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80033da:	2201      	movs	r2, #1
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <vTaskPrioritySet+0x14c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4013      	ands	r3, r2
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <vTaskPrioritySet+0x14c>)
 80033ec:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	2201      	movs	r2, #1
 80033f4:	409a      	lsls	r2, r3
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <vTaskPrioritySet+0x14c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	4a12      	ldr	r2, [pc, #72]	; (8003448 <vTaskPrioritySet+0x14c>)
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <vTaskPrioritySet+0x148>)
 800340e:	441a      	add	r2, r3
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f7fe ff8c 	bl	8002334 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <vTaskPrioritySet+0x136>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <vTaskPrioritySet+0x150>)
 8003424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003432:	f000 ff87 	bl	8004344 <vPortExitCritical>
	}
 8003436:	bf00      	nop
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000320 	.word	0x20000320
 8003444:	20000324 	.word	0x20000324
 8003448:	20000428 	.word	0x20000428
 800344c:	e000ed04 	.word	0xe000ed04

08003450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800345e:	463a      	mov	r2, r7
 8003460:	1d39      	adds	r1, r7, #4
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f8f4 	bl	8000654 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800346c:	6839      	ldr	r1, [r7, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	9202      	str	r2, [sp, #8]
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	2300      	movs	r3, #0
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	460a      	mov	r2, r1
 800347e:	491e      	ldr	r1, [pc, #120]	; (80034f8 <vTaskStartScheduler+0xa8>)
 8003480:	481e      	ldr	r0, [pc, #120]	; (80034fc <vTaskStartScheduler+0xac>)
 8003482:	f7ff fd73 	bl	8002f6c <xTaskCreateStatic>
 8003486:	4603      	mov	r3, r0
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <vTaskStartScheduler+0xb0>)
 800348a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <vTaskStartScheduler+0xb0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003494:	2301      	movs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e001      	b.n	800349e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d116      	bne.n	80034d2 <vTaskStartScheduler+0x82>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	613b      	str	r3, [r7, #16]
}
 80034b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <vTaskStartScheduler+0xb4>)
 80034ba:	f04f 32ff 	mov.w	r2, #4294967295
 80034be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <vTaskStartScheduler+0xb8>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <vTaskStartScheduler+0xbc>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034cc:	f000 fe68 	bl	80041a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034d0:	e00e      	b.n	80034f0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d10a      	bne.n	80034f0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	60fb      	str	r3, [r7, #12]
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <vTaskStartScheduler+0x9e>
}
 80034f0:	bf00      	nop
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	080049e8 	.word	0x080049e8
 80034fc:	08003aa1 	.word	0x08003aa1
 8003500:	20000444 	.word	0x20000444
 8003504:	20000440 	.word	0x20000440
 8003508:	2000042c 	.word	0x2000042c
 800350c:	20000424 	.word	0x20000424

08003510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <vTaskSuspendAll+0x18>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a03      	ldr	r2, [pc, #12]	; (8003528 <vTaskSuspendAll+0x18>)
 800351c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000448 	.word	0x20000448

0800352c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800353a:	4b41      	ldr	r3, [pc, #260]	; (8003640 <xTaskResumeAll+0x114>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <xTaskResumeAll+0x2c>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	603b      	str	r3, [r7, #0]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003558:	f000 fec4 	bl	80042e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800355c:	4b38      	ldr	r3, [pc, #224]	; (8003640 <xTaskResumeAll+0x114>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	4a37      	ldr	r2, [pc, #220]	; (8003640 <xTaskResumeAll+0x114>)
 8003564:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003566:	4b36      	ldr	r3, [pc, #216]	; (8003640 <xTaskResumeAll+0x114>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d161      	bne.n	8003632 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800356e:	4b35      	ldr	r3, [pc, #212]	; (8003644 <xTaskResumeAll+0x118>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d05d      	beq.n	8003632 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003576:	e02e      	b.n	80035d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003578:	4b33      	ldr	r3, [pc, #204]	; (8003648 <xTaskResumeAll+0x11c>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3318      	adds	r3, #24
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe ff32 	bl	80023ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe ff2d 	bl	80023ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2201      	movs	r2, #1
 800359a:	409a      	lsls	r2, r3
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <xTaskResumeAll+0x120>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	4a2a      	ldr	r2, [pc, #168]	; (800364c <xTaskResumeAll+0x120>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4a27      	ldr	r2, [pc, #156]	; (8003650 <xTaskResumeAll+0x124>)
 80035b4:	441a      	add	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3304      	adds	r3, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f7fe feb9 	bl	8002334 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <xTaskResumeAll+0x128>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035d0:	4b21      	ldr	r3, [pc, #132]	; (8003658 <xTaskResumeAll+0x12c>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d6:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <xTaskResumeAll+0x11c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1cc      	bne.n	8003578 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035e4:	f000 fb12 	bl	8003c0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <xTaskResumeAll+0x130>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035f4:	f000 f836 	bl	8003664 <xTaskIncrementTick>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80035fe:	4b16      	ldr	r3, [pc, #88]	; (8003658 <xTaskResumeAll+0x12c>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f1      	bne.n	80035f4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003610:	4b12      	ldr	r3, [pc, #72]	; (800365c <xTaskResumeAll+0x130>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <xTaskResumeAll+0x12c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <xTaskResumeAll+0x134>)
 8003624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003632:	f000 fe87 	bl	8004344 <vPortExitCritical>

	return xAlreadyYielded;
 8003636:	68bb      	ldr	r3, [r7, #8]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000448 	.word	0x20000448
 8003644:	20000420 	.word	0x20000420
 8003648:	200003e0 	.word	0x200003e0
 800364c:	20000428 	.word	0x20000428
 8003650:	20000324 	.word	0x20000324
 8003654:	20000320 	.word	0x20000320
 8003658:	20000434 	.word	0x20000434
 800365c:	20000430 	.word	0x20000430
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800366e:	4b4e      	ldr	r3, [pc, #312]	; (80037a8 <xTaskIncrementTick+0x144>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 808e 	bne.w	8003794 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003678:	4b4c      	ldr	r3, [pc, #304]	; (80037ac <xTaskIncrementTick+0x148>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3301      	adds	r3, #1
 800367e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003680:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <xTaskIncrementTick+0x148>)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d120      	bne.n	80036ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800368c:	4b48      	ldr	r3, [pc, #288]	; (80037b0 <xTaskIncrementTick+0x14c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <xTaskIncrementTick+0x48>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	603b      	str	r3, [r7, #0]
}
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <xTaskIncrementTick+0x46>
 80036ac:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <xTaskIncrementTick+0x14c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b40      	ldr	r3, [pc, #256]	; (80037b4 <xTaskIncrementTick+0x150>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a3e      	ldr	r2, [pc, #248]	; (80037b0 <xTaskIncrementTick+0x14c>)
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4a3e      	ldr	r2, [pc, #248]	; (80037b4 <xTaskIncrementTick+0x150>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <xTaskIncrementTick+0x154>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3301      	adds	r3, #1
 80036c6:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <xTaskIncrementTick+0x154>)
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	f000 fa9f 	bl	8003c0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036ce:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <xTaskIncrementTick+0x158>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d348      	bcc.n	800376a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <xTaskIncrementTick+0x14c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <xTaskIncrementTick+0x158>)
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	601a      	str	r2, [r3, #0]
					break;
 80036ea:	e03e      	b.n	800376a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ec:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <xTaskIncrementTick+0x14c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d203      	bcs.n	800370c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003704:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <xTaskIncrementTick+0x158>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800370a:	e02e      	b.n	800376a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	3304      	adds	r3, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fe6c 	bl	80023ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	3318      	adds	r3, #24
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fe63 	bl	80023ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <xTaskIncrementTick+0x15c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	4a22      	ldr	r2, [pc, #136]	; (80037c0 <xTaskIncrementTick+0x15c>)
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <xTaskIncrementTick+0x160>)
 8003748:	441a      	add	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3304      	adds	r3, #4
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7fe fdef 	bl	8002334 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <xTaskIncrementTick+0x164>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	429a      	cmp	r2, r3
 8003762:	d3b9      	bcc.n	80036d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003768:	e7b6      	b.n	80036d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <xTaskIncrementTick+0x164>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4914      	ldr	r1, [pc, #80]	; (80037c4 <xTaskIncrementTick+0x160>)
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d901      	bls.n	8003786 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <xTaskIncrementTick+0x168>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800378e:	2301      	movs	r3, #1
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e004      	b.n	800379e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <xTaskIncrementTick+0x16c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <xTaskIncrementTick+0x16c>)
 800379c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800379e:	697b      	ldr	r3, [r7, #20]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000448 	.word	0x20000448
 80037ac:	20000424 	.word	0x20000424
 80037b0:	200003d8 	.word	0x200003d8
 80037b4:	200003dc 	.word	0x200003dc
 80037b8:	20000438 	.word	0x20000438
 80037bc:	20000440 	.word	0x20000440
 80037c0:	20000428 	.word	0x20000428
 80037c4:	20000324 	.word	0x20000324
 80037c8:	20000320 	.word	0x20000320
 80037cc:	20000434 	.word	0x20000434
 80037d0:	20000430 	.word	0x20000430

080037d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <vTaskSwitchContext+0xa4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037e2:	4b26      	ldr	r3, [pc, #152]	; (800387c <vTaskSwitchContext+0xa8>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037e8:	e03f      	b.n	800386a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80037ea:	4b24      	ldr	r3, [pc, #144]	; (800387c <vTaskSwitchContext+0xa8>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <vTaskSwitchContext+0xac>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037fe:	7afb      	ldrb	r3, [r7, #11]
 8003800:	f1c3 031f 	rsb	r3, r3, #31
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	491f      	ldr	r1, [pc, #124]	; (8003884 <vTaskSwitchContext+0xb0>)
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <vTaskSwitchContext+0x5c>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	607b      	str	r3, [r7, #4]
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <vTaskSwitchContext+0x5a>
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <vTaskSwitchContext+0xb0>)
 800383c:	4413      	add	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3308      	adds	r3, #8
 8003852:	429a      	cmp	r2, r3
 8003854:	d104      	bne.n	8003860 <vTaskSwitchContext+0x8c>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	4a08      	ldr	r2, [pc, #32]	; (8003888 <vTaskSwitchContext+0xb4>)
 8003868:	6013      	str	r3, [r2, #0]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000448 	.word	0x20000448
 800387c:	20000434 	.word	0x20000434
 8003880:	20000428 	.word	0x20000428
 8003884:	20000324 	.word	0x20000324
 8003888:	20000320 	.word	0x20000320

0800388c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	60fb      	str	r3, [r7, #12]
}
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <vTaskPlaceOnEventList+0x44>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3318      	adds	r3, #24
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fe fd5e 	bl	800237c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038c0:	2101      	movs	r1, #1
 80038c2:	6838      	ldr	r0, [r7, #0]
 80038c4:	f000 fb7e 	bl	8003fc4 <prvAddCurrentTaskToDelayedList>
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000320 	.word	0x20000320

080038d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	60fb      	str	r3, [r7, #12]
}
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	3318      	adds	r3, #24
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe fd72 	bl	80023ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800390a:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <xTaskRemoveFromEventList+0xac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11c      	bne.n	800394c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	3304      	adds	r3, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fd69 	bl	80023ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	2201      	movs	r2, #1
 8003922:	409a      	lsls	r2, r3
 8003924:	4b17      	ldr	r3, [pc, #92]	; (8003984 <xTaskRemoveFromEventList+0xb0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4313      	orrs	r3, r2
 800392a:	4a16      	ldr	r2, [pc, #88]	; (8003984 <xTaskRemoveFromEventList+0xb0>)
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4a13      	ldr	r2, [pc, #76]	; (8003988 <xTaskRemoveFromEventList+0xb4>)
 800393c:	441a      	add	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7fe fcf5 	bl	8002334 <vListInsertEnd>
 800394a:	e005      	b.n	8003958 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	3318      	adds	r3, #24
 8003950:	4619      	mov	r1, r3
 8003952:	480e      	ldr	r0, [pc, #56]	; (800398c <xTaskRemoveFromEventList+0xb8>)
 8003954:	f7fe fcee 	bl	8002334 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <xTaskRemoveFromEventList+0xbc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	429a      	cmp	r2, r3
 8003964:	d905      	bls.n	8003972 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <xTaskRemoveFromEventList+0xc0>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e001      	b.n	8003976 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003976:	697b      	ldr	r3, [r7, #20]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000448 	.word	0x20000448
 8003984:	20000428 	.word	0x20000428
 8003988:	20000324 	.word	0x20000324
 800398c:	200003e0 	.word	0x200003e0
 8003990:	20000320 	.word	0x20000320
 8003994:	20000434 	.word	0x20000434

08003998 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <vTaskInternalSetTimeOutState+0x24>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <vTaskInternalSetTimeOutState+0x28>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	605a      	str	r2, [r3, #4]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	20000438 	.word	0x20000438
 80039c0:	20000424 	.word	0x20000424

080039c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	613b      	str	r3, [r7, #16]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	60fb      	str	r3, [r7, #12]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a06:	f000 fc6d 	bl	80042e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <xTaskCheckForTimeOut+0xbc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d102      	bne.n	8003a2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	e023      	b.n	8003a72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <xTaskCheckForTimeOut+0xc0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d007      	beq.n	8003a46 <xTaskCheckForTimeOut+0x82>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	e015      	b.n	8003a72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d20b      	bcs.n	8003a68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	1ad2      	subs	r2, r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff9b 	bl	8003998 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	e004      	b.n	8003a72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a72:	f000 fc67 	bl	8004344 <vPortExitCritical>

	return xReturn;
 8003a76:	69fb      	ldr	r3, [r7, #28]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000424 	.word	0x20000424
 8003a84:	20000438 	.word	0x20000438

08003a88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <vTaskMissedYield+0x14>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
}
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	20000434 	.word	0x20000434

08003aa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003aa8:	f000 f852 	bl	8003b50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <prvIdleTask+0x28>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d9f9      	bls.n	8003aa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <prvIdleTask+0x2c>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ac4:	e7f0      	b.n	8003aa8 <prvIdleTask+0x8>
 8003ac6:	bf00      	nop
 8003ac8:	20000324 	.word	0x20000324
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	e00c      	b.n	8003af6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <prvInitialiseTaskLists+0x60>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fbf5 	bl	80022da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3301      	adds	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	d9ef      	bls.n	8003adc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003afc:	480d      	ldr	r0, [pc, #52]	; (8003b34 <prvInitialiseTaskLists+0x64>)
 8003afe:	f7fe fbec 	bl	80022da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b02:	480d      	ldr	r0, [pc, #52]	; (8003b38 <prvInitialiseTaskLists+0x68>)
 8003b04:	f7fe fbe9 	bl	80022da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b08:	480c      	ldr	r0, [pc, #48]	; (8003b3c <prvInitialiseTaskLists+0x6c>)
 8003b0a:	f7fe fbe6 	bl	80022da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b0e:	480c      	ldr	r0, [pc, #48]	; (8003b40 <prvInitialiseTaskLists+0x70>)
 8003b10:	f7fe fbe3 	bl	80022da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b14:	480b      	ldr	r0, [pc, #44]	; (8003b44 <prvInitialiseTaskLists+0x74>)
 8003b16:	f7fe fbe0 	bl	80022da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <prvInitialiseTaskLists+0x78>)
 8003b1c:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <prvInitialiseTaskLists+0x64>)
 8003b1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <prvInitialiseTaskLists+0x7c>)
 8003b22:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <prvInitialiseTaskLists+0x68>)
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000324 	.word	0x20000324
 8003b34:	200003b0 	.word	0x200003b0
 8003b38:	200003c4 	.word	0x200003c4
 8003b3c:	200003e0 	.word	0x200003e0
 8003b40:	200003f4 	.word	0x200003f4
 8003b44:	2000040c 	.word	0x2000040c
 8003b48:	200003d8 	.word	0x200003d8
 8003b4c:	200003dc 	.word	0x200003dc

08003b50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b56:	e019      	b.n	8003b8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b58:	f000 fbc4 	bl	80042e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <prvCheckTasksWaitingTermination+0x50>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fc40 	bl	80023ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <prvCheckTasksWaitingTermination+0x54>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	4a0b      	ldr	r2, [pc, #44]	; (8003ba4 <prvCheckTasksWaitingTermination+0x54>)
 8003b76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <prvCheckTasksWaitingTermination+0x58>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <prvCheckTasksWaitingTermination+0x58>)
 8003b80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b82:	f000 fbdf 	bl	8004344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f810 	bl	8003bac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <prvCheckTasksWaitingTermination+0x58>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e1      	bne.n	8003b58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200003f4 	.word	0x200003f4
 8003ba4:	20000420 	.word	0x20000420
 8003ba8:	20000408 	.word	0x20000408

08003bac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d108      	bne.n	8003bd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fd7c 	bl	80046c0 <vPortFree>
				vPortFree( pxTCB );
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fd79 	bl	80046c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bce:	e018      	b.n	8003c02 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d103      	bne.n	8003be2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fd70 	bl	80046c0 <vPortFree>
	}
 8003be0:	e00f      	b.n	8003c02 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d00a      	beq.n	8003c02 <prvDeleteTCB+0x56>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	60fb      	str	r3, [r7, #12]
}
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <prvDeleteTCB+0x54>
	}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <prvResetNextTaskUnblockTime+0x38>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <prvResetNextTaskUnblockTime+0x3c>)
 8003c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c24:	e008      	b.n	8003c38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <prvResetNextTaskUnblockTime+0x38>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <prvResetNextTaskUnblockTime+0x3c>)
 8003c36:	6013      	str	r3, [r2, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	200003d8 	.word	0x200003d8
 8003c48:	20000440 	.word	0x20000440

08003c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <xTaskGetSchedulerState+0x34>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	e008      	b.n	8003c72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <xTaskGetSchedulerState+0x38>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	e001      	b.n	8003c72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c72:	687b      	ldr	r3, [r7, #4]
	}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	2000042c 	.word	0x2000042c
 8003c84:	20000448 	.word	0x20000448

08003c88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d05e      	beq.n	8003d5c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca2:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <xTaskPriorityInherit+0xe0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d24e      	bcs.n	8003d4a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	db06      	blt.n	8003cc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb4:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <xTaskPriorityInherit+0xe0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	f1c3 0207 	rsb	r2, r3, #7
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6959      	ldr	r1, [r3, #20]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <xTaskPriorityInherit+0xe4>)
 8003cd4:	4413      	add	r3, r2
 8003cd6:	4299      	cmp	r1, r3
 8003cd8:	d12f      	bne.n	8003d3a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fb85 	bl	80023ee <uxListRemove>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	2201      	movs	r2, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43da      	mvns	r2, r3
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <xTaskPriorityInherit+0xe8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <xTaskPriorityInherit+0xe8>)
 8003cfe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <xTaskPriorityInherit+0xe0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	2201      	movs	r2, #1
 8003d10:	409a      	lsls	r2, r3
 8003d12:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <xTaskPriorityInherit+0xe8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <xTaskPriorityInherit+0xe8>)
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <xTaskPriorityInherit+0xe4>)
 8003d2a:	441a      	add	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f7fe fafe 	bl	8002334 <vListInsertEnd>
 8003d38:	e004      	b.n	8003d44 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <xTaskPriorityInherit+0xe0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e008      	b.n	8003d5c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <xTaskPriorityInherit+0xe0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d201      	bcs.n	8003d5c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
	}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000320 	.word	0x20000320
 8003d6c:	20000324 	.word	0x20000324
 8003d70:	20000428 	.word	0x20000428

08003d74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d06e      	beq.n	8003e68 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d8a:	4b3a      	ldr	r3, [pc, #232]	; (8003e74 <xTaskPriorityDisinherit+0x100>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d00a      	beq.n	8003daa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	60fb      	str	r3, [r7, #12]
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	60bb      	str	r3, [r7, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	e7fe      	b.n	8003dc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dcc:	1e5a      	subs	r2, r3, #1
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d044      	beq.n	8003e68 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d140      	bne.n	8003e68 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe faff 	bl	80023ee <uxListRemove>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	491f      	ldr	r1, [pc, #124]	; (8003e78 <xTaskPriorityDisinherit+0x104>)
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xTaskPriorityDisinherit+0xae>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	2201      	movs	r2, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <xTaskPriorityDisinherit+0x108>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <xTaskPriorityDisinherit+0x108>)
 8003e20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f1c3 0207 	rsb	r2, r3, #7
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <xTaskPriorityDisinherit+0x108>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <xTaskPriorityDisinherit+0x108>)
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4a08      	ldr	r2, [pc, #32]	; (8003e78 <xTaskPriorityDisinherit+0x104>)
 8003e56:	441a      	add	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7fe fa68 	bl	8002334 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e64:	2301      	movs	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e68:	697b      	ldr	r3, [r7, #20]
	}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000320 	.word	0x20000320
 8003e78:	20000324 	.word	0x20000324
 8003e7c:	20000428 	.word	0x20000428

08003e80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d077      	beq.n	8003f88 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	60fb      	str	r3, [r7, #12]
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d902      	bls.n	8003ec6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e002      	b.n	8003ecc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d058      	beq.n	8003f88 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d153      	bne.n	8003f88 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003ee0:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d10a      	bne.n	8003f00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	60bb      	str	r3, [r7, #8]
}
 8003efc:	bf00      	nop
 8003efe:	e7fe      	b.n	8003efe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	db04      	blt.n	8003f1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f1c3 0207 	rsb	r2, r3, #7
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6959      	ldr	r1, [r3, #20]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	4299      	cmp	r1, r3
 8003f32:	d129      	bne.n	8003f88 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe fa58 	bl	80023ee <uxListRemove>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4013      	ands	r3, r2
 8003f56:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003f58:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	2201      	movs	r2, #1
 8003f60:	409a      	lsls	r2, r3
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4a06      	ldr	r2, [pc, #24]	; (8003f94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003f7a:	441a      	add	r2, r3
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f7fe f9d6 	bl	8002334 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f88:	bf00      	nop
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000320 	.word	0x20000320
 8003f94:	20000324 	.word	0x20000324
 8003f98:	20000428 	.word	0x20000428

08003f9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fae:	3201      	adds	r2, #1
 8003fb0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003fb2:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
	}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	20000320 	.word	0x20000320

08003fc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fce:	4b29      	ldr	r3, [pc, #164]	; (8004074 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fa07 	bl	80023ee <uxListRemove>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	2201      	movs	r2, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	4b21      	ldr	r3, [pc, #132]	; (800407c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ffc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d10a      	bne.n	800401c <prvAddCurrentTaskToDelayedList+0x58>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	481a      	ldr	r0, [pc, #104]	; (8004080 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004016:	f7fe f98d 	bl	8002334 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800401a:	e026      	b.n	800406a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	429a      	cmp	r2, r3
 8004032:	d209      	bcs.n	8004048 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3304      	adds	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f7fe f99b 	bl	800237c <vListInsert>
}
 8004046:	e010      	b.n	800406a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <prvAddCurrentTaskToDelayedList+0xc4>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3304      	adds	r3, #4
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f7fe f991 	bl	800237c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <prvAddCurrentTaskToDelayedList+0xc8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	429a      	cmp	r2, r3
 8004062:	d202      	bcs.n	800406a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004064:	4a09      	ldr	r2, [pc, #36]	; (800408c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6013      	str	r3, [r2, #0]
}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000424 	.word	0x20000424
 8004078:	20000320 	.word	0x20000320
 800407c:	20000428 	.word	0x20000428
 8004080:	2000040c 	.word	0x2000040c
 8004084:	200003dc 	.word	0x200003dc
 8004088:	200003d8 	.word	0x200003d8
 800408c:	20000440 	.word	0x20000440

08004090 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3b04      	subs	r3, #4
 80040a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b04      	subs	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f023 0201 	bic.w	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3b04      	subs	r3, #4
 80040be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040c0:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <pxPortInitialiseStack+0x64>)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3b14      	subs	r3, #20
 80040ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b04      	subs	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f06f 0202 	mvn.w	r2, #2
 80040de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3b20      	subs	r3, #32
 80040e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	080040f9 	.word	0x080040f9

080040f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <prvTaskExitError+0x54>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d00a      	beq.n	8004122 <prvTaskExitError+0x2a>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <prvTaskExitError+0x28>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60bb      	str	r3, [r7, #8]
}
 8004134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004136:	bf00      	nop
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0fc      	beq.n	8004138 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	2000005c 	.word	0x2000005c

08004150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <pxCurrentTCBConst2>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415a:	f380 8809 	msr	PSP, r0
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	4770      	bx	lr
 800416c:	f3af 8000 	nop.w

08004170 <pxCurrentTCBConst2>:
 8004170:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004178:	4808      	ldr	r0, [pc, #32]	; (800419c <prvPortStartFirstTask+0x24>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f380 8814 	msr	CONTROL, r0
 800418a:	b662      	cpsie	i
 800418c:	b661      	cpsie	f
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	df00      	svc	0
 8004198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800419a:	bf00      	nop
 800419c:	e000ed08 	.word	0xe000ed08

080041a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041a6:	4b46      	ldr	r3, [pc, #280]	; (80042c0 <xPortStartScheduler+0x120>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a46      	ldr	r2, [pc, #280]	; (80042c4 <xPortStartScheduler+0x124>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10a      	bne.n	80041c6 <xPortStartScheduler+0x26>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	613b      	str	r3, [r7, #16]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041c6:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <xPortStartScheduler+0x120>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3f      	ldr	r2, [pc, #252]	; (80042c8 <xPortStartScheduler+0x128>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10a      	bne.n	80041e6 <xPortStartScheduler+0x46>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	60fb      	str	r3, [r7, #12]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041e6:	4b39      	ldr	r3, [pc, #228]	; (80042cc <xPortStartScheduler+0x12c>)
 80041e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	22ff      	movs	r2, #255	; 0xff
 80041f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <xPortStartScheduler+0x130>)
 800420c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800420e:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <xPortStartScheduler+0x134>)
 8004210:	2207      	movs	r2, #7
 8004212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004214:	e009      	b.n	800422a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004216:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <xPortStartScheduler+0x134>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3b01      	subs	r3, #1
 800421c:	4a2d      	ldr	r2, [pc, #180]	; (80042d4 <xPortStartScheduler+0x134>)
 800421e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d0ef      	beq.n	8004216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004236:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <xPortStartScheduler+0x134>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	d00a      	beq.n	8004258 <xPortStartScheduler+0xb8>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	60bb      	str	r3, [r7, #8]
}
 8004254:	bf00      	nop
 8004256:	e7fe      	b.n	8004256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004258:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <xPortStartScheduler+0x134>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <xPortStartScheduler+0x134>)
 8004260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <xPortStartScheduler+0x134>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800426a:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <xPortStartScheduler+0x134>)
 800426c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <xPortStartScheduler+0x138>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <xPortStartScheduler+0x138>)
 800427c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <xPortStartScheduler+0x138>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <xPortStartScheduler+0x138>)
 8004288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800428c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800428e:	f000 f8dd 	bl	800444c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <xPortStartScheduler+0x13c>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004298:	f000 f8fc 	bl	8004494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800429c:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <xPortStartScheduler+0x140>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0f      	ldr	r2, [pc, #60]	; (80042e0 <xPortStartScheduler+0x140>)
 80042a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042a8:	f7ff ff66 	bl	8004178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042ac:	f7ff fa92 	bl	80037d4 <vTaskSwitchContext>
	prvTaskExitError();
 80042b0:	f7ff ff22 	bl	80040f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	e000ed00 	.word	0xe000ed00
 80042c4:	410fc271 	.word	0x410fc271
 80042c8:	410fc270 	.word	0x410fc270
 80042cc:	e000e400 	.word	0xe000e400
 80042d0:	2000044c 	.word	0x2000044c
 80042d4:	20000450 	.word	0x20000450
 80042d8:	e000ed20 	.word	0xe000ed20
 80042dc:	2000005c 	.word	0x2000005c
 80042e0:	e000ef34 	.word	0xe000ef34

080042e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	607b      	str	r3, [r7, #4]
}
 80042fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <vPortEnterCritical+0x58>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	4a0d      	ldr	r2, [pc, #52]	; (800433c <vPortEnterCritical+0x58>)
 8004306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <vPortEnterCritical+0x58>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10f      	bne.n	8004330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <vPortEnterCritical+0x5c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <vPortEnterCritical+0x4c>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	603b      	str	r3, [r7, #0]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <vPortEnterCritical+0x4a>
	}
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	2000005c 	.word	0x2000005c
 8004340:	e000ed04 	.word	0xe000ed04

08004344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <vPortExitCritical+0x50>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <vPortExitCritical+0x24>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	607b      	str	r3, [r7, #4]
}
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <vPortExitCritical+0x50>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3b01      	subs	r3, #1
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <vPortExitCritical+0x50>)
 8004370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <vPortExitCritical+0x50>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d105      	bne.n	8004386 <vPortExitCritical+0x42>
 800437a:	2300      	movs	r3, #0
 800437c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f383 8811 	msr	BASEPRI, r3
}
 8004384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	2000005c 	.word	0x2000005c
	...

080043a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043a0:	f3ef 8009 	mrs	r0, PSP
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	4b15      	ldr	r3, [pc, #84]	; (8004400 <pxCurrentTCBConst>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	f01e 0f10 	tst.w	lr, #16
 80043b0:	bf08      	it	eq
 80043b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ba:	6010      	str	r0, [r2, #0]
 80043bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043c4:	f380 8811 	msr	BASEPRI, r0
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f7ff fa00 	bl	80037d4 <vTaskSwitchContext>
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f380 8811 	msr	BASEPRI, r0
 80043dc:	bc09      	pop	{r0, r3}
 80043de:	6819      	ldr	r1, [r3, #0]
 80043e0:	6808      	ldr	r0, [r1, #0]
 80043e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e6:	f01e 0f10 	tst.w	lr, #16
 80043ea:	bf08      	it	eq
 80043ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043f0:	f380 8809 	msr	PSP, r0
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	f3af 8000 	nop.w

08004400 <pxCurrentTCBConst>:
 8004400:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop

08004408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	607b      	str	r3, [r7, #4]
}
 8004420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004422:	f7ff f91f 	bl	8003664 <xTaskIncrementTick>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <xPortSysTickHandler+0x40>)
 800442e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f383 8811 	msr	BASEPRI, r3
}
 800443e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <vPortSetupTimerInterrupt+0x34>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <vPortSetupTimerInterrupt+0x38>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <vPortSetupTimerInterrupt+0x3c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0a      	ldr	r2, [pc, #40]	; (800448c <vPortSetupTimerInterrupt+0x40>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	4a09      	ldr	r2, [pc, #36]	; (8004490 <vPortSetupTimerInterrupt+0x44>)
 800446a:	3b01      	subs	r3, #1
 800446c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <vPortSetupTimerInterrupt+0x34>)
 8004470:	2207      	movs	r2, #7
 8004472:	601a      	str	r2, [r3, #0]
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	e000e010 	.word	0xe000e010
 8004484:	e000e018 	.word	0xe000e018
 8004488:	20000050 	.word	0x20000050
 800448c:	10624dd3 	.word	0x10624dd3
 8004490:	e000e014 	.word	0xe000e014

08004494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044a4 <vPortEnableVFP+0x10>
 8004498:	6801      	ldr	r1, [r0, #0]
 800449a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800449e:	6001      	str	r1, [r0, #0]
 80044a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044a2:	bf00      	nop
 80044a4:	e000ed88 	.word	0xe000ed88

080044a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044ae:	f3ef 8305 	mrs	r3, IPSR
 80044b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	d914      	bls.n	80044e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ba:	4a17      	ldr	r2, [pc, #92]	; (8004518 <vPortValidateInterruptPriority+0x70>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <vPortValidateInterruptPriority+0x74>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	7afa      	ldrb	r2, [r7, #11]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d20a      	bcs.n	80044e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	607b      	str	r3, [r7, #4]
}
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044e4:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <vPortValidateInterruptPriority+0x78>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <vPortValidateInterruptPriority+0x7c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d90a      	bls.n	800450a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	603b      	str	r3, [r7, #0]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <vPortValidateInterruptPriority+0x60>
	}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000e3f0 	.word	0xe000e3f0
 800451c:	2000044c 	.word	0x2000044c
 8004520:	e000ed0c 	.word	0xe000ed0c
 8004524:	20000450 	.word	0x20000450

08004528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004534:	f7fe ffec 	bl	8003510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004538:	4b5b      	ldr	r3, [pc, #364]	; (80046a8 <pvPortMalloc+0x180>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004540:	f000 f920 	bl	8004784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <pvPortMalloc+0x184>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 8093 	bne.w	8004678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01d      	beq.n	8004594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004558:	2208      	movs	r2, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b00      	cmp	r3, #0
 8004568:	d014      	beq.n	8004594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f023 0307 	bic.w	r3, r3, #7
 8004570:	3308      	adds	r3, #8
 8004572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <pvPortMalloc+0x6c>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	617b      	str	r3, [r7, #20]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d06e      	beq.n	8004678 <pvPortMalloc+0x150>
 800459a:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <pvPortMalloc+0x188>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d869      	bhi.n	8004678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <pvPortMalloc+0x18c>)
 80045a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045a8:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <pvPortMalloc+0x18c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ae:	e004      	b.n	80045ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d903      	bls.n	80045cc <pvPortMalloc+0xa4>
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f1      	bne.n	80045b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045cc:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <pvPortMalloc+0x180>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d050      	beq.n	8004678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2208      	movs	r2, #8
 80045dc:	4413      	add	r3, r2
 80045de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	2308      	movs	r3, #8
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d91f      	bls.n	8004638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <pvPortMalloc+0xf8>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	613b      	str	r3, [r7, #16]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	1ad2      	subs	r2, r2, r3
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004632:	69b8      	ldr	r0, [r7, #24]
 8004634:	f000 f908 	bl	8004848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <pvPortMalloc+0x188>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <pvPortMalloc+0x188>)
 8004644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <pvPortMalloc+0x188>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <pvPortMalloc+0x190>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d203      	bcs.n	800465a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004652:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <pvPortMalloc+0x188>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <pvPortMalloc+0x190>)
 8004658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <pvPortMalloc+0x184>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	431a      	orrs	r2, r3
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800466e:	4b13      	ldr	r3, [pc, #76]	; (80046bc <pvPortMalloc+0x194>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	4a11      	ldr	r2, [pc, #68]	; (80046bc <pvPortMalloc+0x194>)
 8004676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004678:	f7fe ff58 	bl	800352c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <pvPortMalloc+0x174>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	60fb      	str	r3, [r7, #12]
}
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <pvPortMalloc+0x172>
	return pvReturn;
 800469c:	69fb      	ldr	r3, [r7, #28]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000405c 	.word	0x2000405c
 80046ac:	20004070 	.word	0x20004070
 80046b0:	20004060 	.word	0x20004060
 80046b4:	20004054 	.word	0x20004054
 80046b8:	20004064 	.word	0x20004064
 80046bc:	20004068 	.word	0x20004068

080046c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d04d      	beq.n	800476e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046d2:	2308      	movs	r3, #8
 80046d4:	425b      	negs	r3, r3
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4413      	add	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <vPortFree+0xb8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <vPortFree+0x44>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	60fb      	str	r3, [r7, #12]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <vPortFree+0x62>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60bb      	str	r3, [r7, #8]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <vPortFree+0xb8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01e      	beq.n	800476e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11a      	bne.n	800476e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <vPortFree+0xb8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004748:	f7fe fee2 	bl	8003510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <vPortFree+0xbc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4413      	add	r3, r2
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <vPortFree+0xbc>)
 8004758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800475a:	6938      	ldr	r0, [r7, #16]
 800475c:	f000 f874 	bl	8004848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <vPortFree+0xc0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	4a06      	ldr	r2, [pc, #24]	; (8004780 <vPortFree+0xc0>)
 8004768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800476a:	f7fe fedf 	bl	800352c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800476e:	bf00      	nop
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20004070 	.word	0x20004070
 800477c:	20004060 	.word	0x20004060
 8004780:	2000406c 	.word	0x2000406c

08004784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800478a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800478e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004790:	4b27      	ldr	r3, [pc, #156]	; (8004830 <prvHeapInit+0xac>)
 8004792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3307      	adds	r3, #7
 80047a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0307 	bic.w	r3, r3, #7
 80047aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <prvHeapInit+0xac>)
 80047b4:	4413      	add	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <prvHeapInit+0xb0>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047c2:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <prvHeapInit+0xb0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4413      	add	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047d0:	2208      	movs	r2, #8
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a15      	ldr	r2, [pc, #84]	; (8004838 <prvHeapInit+0xb4>)
 80047e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <prvHeapInit+0xb4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2200      	movs	r2, #0
 80047ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <prvHeapInit+0xb4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <prvHeapInit+0xb4>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a0a      	ldr	r2, [pc, #40]	; (800483c <prvHeapInit+0xb8>)
 8004812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a09      	ldr	r2, [pc, #36]	; (8004840 <prvHeapInit+0xbc>)
 800481a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <prvHeapInit+0xc0>)
 800481e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	20000454 	.word	0x20000454
 8004834:	20004054 	.word	0x20004054
 8004838:	2000405c 	.word	0x2000405c
 800483c:	20004064 	.word	0x20004064
 8004840:	20004060 	.word	0x20004060
 8004844:	20004070 	.word	0x20004070

08004848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004850:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <prvInsertBlockIntoFreeList+0xac>)
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e002      	b.n	800485c <prvInsertBlockIntoFreeList+0x14>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d8f7      	bhi.n	8004856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4413      	add	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	429a      	cmp	r2, r3
 8004876:	d108      	bne.n	800488a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	441a      	add	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d118      	bne.n	80048d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <prvInsertBlockIntoFreeList+0xb0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d00d      	beq.n	80048c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e008      	b.n	80048d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <prvInsertBlockIntoFreeList+0xb0>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e003      	b.n	80048d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d002      	beq.n	80048e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20004054 	.word	0x20004054
 80048f8:	2000405c 	.word	0x2000405c

080048fc <memset>:
 80048fc:	4402      	add	r2, r0
 80048fe:	4603      	mov	r3, r0
 8004900:	4293      	cmp	r3, r2
 8004902:	d100      	bne.n	8004906 <memset+0xa>
 8004904:	4770      	bx	lr
 8004906:	f803 1b01 	strb.w	r1, [r3], #1
 800490a:	e7f9      	b.n	8004900 <memset+0x4>

0800490c <__libc_init_array>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4d0d      	ldr	r5, [pc, #52]	; (8004944 <__libc_init_array+0x38>)
 8004910:	4c0d      	ldr	r4, [pc, #52]	; (8004948 <__libc_init_array+0x3c>)
 8004912:	1b64      	subs	r4, r4, r5
 8004914:	10a4      	asrs	r4, r4, #2
 8004916:	2600      	movs	r6, #0
 8004918:	42a6      	cmp	r6, r4
 800491a:	d109      	bne.n	8004930 <__libc_init_array+0x24>
 800491c:	4d0b      	ldr	r5, [pc, #44]	; (800494c <__libc_init_array+0x40>)
 800491e:	4c0c      	ldr	r4, [pc, #48]	; (8004950 <__libc_init_array+0x44>)
 8004920:	f000 f826 	bl	8004970 <_init>
 8004924:	1b64      	subs	r4, r4, r5
 8004926:	10a4      	asrs	r4, r4, #2
 8004928:	2600      	movs	r6, #0
 800492a:	42a6      	cmp	r6, r4
 800492c:	d105      	bne.n	800493a <__libc_init_array+0x2e>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	f855 3b04 	ldr.w	r3, [r5], #4
 8004934:	4798      	blx	r3
 8004936:	3601      	adds	r6, #1
 8004938:	e7ee      	b.n	8004918 <__libc_init_array+0xc>
 800493a:	f855 3b04 	ldr.w	r3, [r5], #4
 800493e:	4798      	blx	r3
 8004940:	3601      	adds	r6, #1
 8004942:	e7f2      	b.n	800492a <__libc_init_array+0x1e>
 8004944:	08004a08 	.word	0x08004a08
 8004948:	08004a08 	.word	0x08004a08
 800494c:	08004a08 	.word	0x08004a08
 8004950:	08004a0c 	.word	0x08004a0c

08004954 <memcpy>:
 8004954:	440a      	add	r2, r1
 8004956:	4291      	cmp	r1, r2
 8004958:	f100 33ff 	add.w	r3, r0, #4294967295
 800495c:	d100      	bne.n	8004960 <memcpy+0xc>
 800495e:	4770      	bx	lr
 8004960:	b510      	push	{r4, lr}
 8004962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800496a:	4291      	cmp	r1, r2
 800496c:	d1f9      	bne.n	8004962 <memcpy+0xe>
 800496e:	bd10      	pop	{r4, pc}

08004970 <_init>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr

0800497c <_fini>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr
